<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>误差逆传播算法及Python实现</title>
      <link href="/2019/12/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%AF%AF%E5%B7%AE%E9%80%86%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95%E5%8F%8APython%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%AF%AF%E5%B7%AE%E9%80%86%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95%E5%8F%8APython%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>前段时间在学习机器学习神经网络这一章节，查了一些资料，手推了下误差逆传播算法，感觉比较了解了，就参考了一下大佬的代码，也用Python写了一个简单的单隐层BP网络。正好今天有点时间，就简单记录了下误差逆传播算法和单层BP网络的Python实现。</p><a id="more"></a><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>关于神经网络我就直接放图吧，如下图所示就是一个单隐层3输入2输出的神经网络。</p><center><br><img src="单隐层神经网络.jpg" width="60%" alt="单隐层神经网络"><br></center><p>神经网络中的每一个节点被称为神经元，具体的讲，是”M-P神经元模型”。神经元将接收到的所有输入转换为总输入值，之后将总输入值与神经元的阈值对比，最后通过激活函数处理以产生输出。</p><p>下图来自周志华老师的《机器学习》第五章神经网络，该图展示了一个M-P神经元模型。</p><center><br><img src="M-P神经元模型.png" width="70%" alt="M-P神经元模型"><br></center><h1 id="误差逆传播算法"><a href="#误差逆传播算法" class="headerlink" title="误差逆传播算法"></a>误差逆传播算法</h1><p>网上有很多关于误差逆传播算法的博文，其中很多讲的非常好，因此我就不对误差逆传播算法进行很细致的说明了，大概讲一下就好(其实主要是我自己的理解也不能说是很深刻，害怕讲错XD)</p><p>我们早就了解了梯度下降算法，误差逆传播算法其实就是基于梯度下降策略，以目标的负梯度方向对参数进行调整，可以看成是神经网络中的梯度下降，原理很简单，只不过相较于线性回归和对数几率回归，神经网络中有着更多的要优化的参数同时有着不止一个的输出。</p><p>对训练样例$(x_{k},y_{k})$假定神经网络的输出为$\hat{y} = (\hat{y}_1^k,\hat{y}_2^k,…,\hat{y}_l^k)$，则在网络上的均方误差可表示为：<br>$$<br>{E}_{k} = \frac{1}{2} \sum_{j=1}^{l}(\hat{y}_{j}^{k} - y^{k}_{j})^{2}<br>$$</p><p>以本文第一部分所示的单层神经网络为例：</p><center><br><img src="单隐层神经网络.jpg" width="60%" alt="单隐层神经网络"><br></center><p>说正事前，我们先定义如下符号表示(大概瞅一眼就行,不知道了再回来看下,这不是什么正规符号,就是方便描述我自己定义的…):<br>$f$: 神经元的激活函数<br>$y$: 输入数据的真实输出<br>$E$: 网络的均方误差<br>$s_{l}$: 第$l$层的神经元个数<br>${\delta}^{(i)}$: 第i层的误差项，注意每个误差项是一个向量}<br>$a^{(i)}_{j}$: 第i层第j个神经元的输出(即经激活函数处理后的输出)<br>$a^{(i)}$: 第i层的输出向量(各神经元的输出构成)<br>$z^{(i)}_{j}$: 第i层第j个神经元的输入(经w加权后的总输入，也是神经元激活函数的输入)<br>$z^{(i)}$: 第i层的输入向量(各神经元的总输入构成)<br>$w^{(i)}_{j}$: 第i层第j个神经元的权重向量(向量的长度等于前一层的神经元个数，第1层不存在权重向量)<br>$w^{(i)}_{j,k}$: 第i层第j个神经元的对前一层第k项输入的个权重(也就是该层权重向量的第k个分量)<br>$w^{(i)}$: 第i层的权重矩阵，行向量为对应神经元的权重向量<br>${\theta}^{(i)}$: 第i层的阈值向量(由第i层各神经元的阈值构成)</p><p>首先，我们注意到以下公式:</p><p>$$<br>E = \frac{1}{2}||a^{(3)} - y||_2^2\\<br>a^{(3)} = f(z^{(3)})\\<br>z^{(3)} = {w^{(3)}}^Ta^{(2)} - {\theta}^{(3)}\\<br>a^{(2)} = f(z^{(2)})\\<br>z^{(2)} = {w^{(2)}}^Ta^{(1)} - {\theta}^{(2)}<br>$$</p><p>其中，$a^{(3)}$为输出层输出(也就是网络的输出$\hat{y}$)，$a^{(1)}$为输入层输入(也就是网络的输入$x$)，$||x||_2$表示向量$x$的L2范数(式中对其加了平方)。其实，就是网络的每一层的输出是对前一层的输入经过加权、减去阈值、激活函数处理的结果，很好理解，对吧？这个公式很容易展开到n层网络的情况。(注: 你可能注意到了在示例的网络中，每一层都单独添加了一个输出恒为1的神经元，这样每一层的阈值${\theta}^{(i)}$就可以表示为1神经元输出的1乘以对其的权重，由此$z^{(i)}$就可以简化为纯粹的向量相乘了)</p><p>设想对于第i层，将i+1层视为输出层，那么我们用第i+1层的”误差”对本层的各个参数求导，是不是就得到了本层各个参数的”梯度”？那么第i+1层的”误差”又是怎么来的？当然是来自第(i+1)+1层的误差！<br>想到什么了吗？将$E$视为输出层误差，再看一眼上面的公式，<strong>复合函数的链式求导法则</strong>！</p><p>先前我们可能在其他地方看到过误差逆传播算法”复杂”的计算公式，实际上，这种复杂是由于网络的复杂导致的。神经网络的输出来自于每层神经元之间的信息传递，因此最终输出是之前各层的输出相互作用产生的，相应的，反向计算梯度时，每一层的误差也是由其后各层的误差相互作用而成的。<br>具体来说，对于输出层，误差就是先前定义的均方误差，然而，在输出层的前一层，由于该层每一个神经元与输出层的神经元全连接，因此，为计算该层一个神经元的误差，我们需要用输出层的每一个神经元的误差对当前神经元的参数求导，在全部相加构成当前神经元的误差。<br>(这里需要提一下，实际上各神经元的阈值${\theta}$是不会对下一层的”误差”由任何影响的，因为在对激活函数$f$这一链接函数求导时，各神经元的阈值已被当做常数丢弃了)</p><p>我们大致了解了误差的”来源”，也”猜”到了为了计算误差和传播误差需要用到链式求导法则，但是，还是比较抽象的理解，下面我们就用本文中的单隐层的网络为例稍微计算一下，本文中我不会全部计算，但强烈建议各位(虽然大概率没人看XD)自己动手算一下，算着算着你就会跟我一样，豁然开朗。</p><p>首先，我们有网络的均方误差$E = \frac{1}{2}||a^{(3)} - y||_2$，使用均方误差对输出层的权重求导，有：  </p><p>$$<br>\frac{\partial{E}}{\partial{w}_{1}^{(3)}} =<br>\color{blue}{<br>    \frac{\partial{E}}{\partial{a}_{1}^{(3)}}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(3)}}{\partial{z}_{1}^{(3)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(3)}}{\partial{w}_{1}^{(3)}}<br>\\<br>\frac{\partial{E}}{\partial{w}_{2}^{(3)}} =<br>\color{blue}{<br>    \frac{\partial{E}}{\partial{a}_{2}^{(3)}}<br>    \cdot<br>    \frac{\partial{a}_{2}^{(3)}}{\partial{z}_{2}^{(3)}}<br>}<br>\cdot<br>\frac{\partial{z}_{2}^{(3)}}{\partial{w}_{2}^{(3)}}<br>$$</p><p>记上述两式中的蓝色部分分别为${\delta}^{(3)}_{1}$和${\delta}^{(3)}_{2}$，即第三层的误差项1和误差项2。<br>上述两个式子可以合并为:</p><p>$$<br>\frac{\partial{E}}{\partial{w}^{(3)}} =<br>\color{blue}{<br>    \frac{\partial{E}}{\partial{a}^{(3)}}<br>    \color{red}{<br>        .*<br>    }<br>    \frac{\partial{a}^{(3)}}{\partial{z}^{(3)}}<br>}<br>\cdot<br>[\frac{\partial{z}^{(3)}}{\partial{w}^{(3)}}]^T<br>$$</p><p>上式中，蓝色部分就是第三层的误差项向量，即${\delta}^{(3)}$，注意，蓝色部分中的红色.*，表示对应项相乘(例:(a,b).*(c,d)=(ac,bd))</p><p>现在我们对第二层的权重进行求导，考虑第二层的第一个神经元的权重$w^{(2)}_{1}$:</p><p>$$<br>\begin{split}<br>\frac{\partial{E}}{\partial{w}_{1}^{(2)}} &amp;=<br>\color{blue}{<br>    \frac{\partial{E}}{\partial{a}_{1}^{(3)}}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(3)}}{\partial{z}_{1}^{(3)}}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{z}_{1}^{(3)}}{\partial{a}_{1}^{(2)}}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>+<br>\color{blue}{<br>    \frac{\partial{E}}{\partial{a}_{2}^{(3)}}<br>    \cdot<br>    \frac{\partial{a}_{2}^{(3)}}{\partial{z}_{2}^{(3)}}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{z}_{2}^{(3)}}{\partial{a}_{1}^{(2)}}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>\\<br>&amp;=<br>\color{blue}{<br>    {\delta}^{(3)}_{1}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{z}_{1}^{(3)}}{\partial{a}_{1}^{(2)}}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>+<br>\color{blue}{<br>    {\delta}^{(3)}_{2}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{z}_{2}^{(3)}}{\partial{a}_{1}^{(2)}}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>\\<br>&amp;=<br>(\color{blue}{<br>    {\delta}^{(3)}_{1}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{z}_{1}^{(3)}}{\partial{a}_{1}^{(2)}}<br>}<br>+<br>\color{blue}{<br>    {\delta}^{(3)}_{2}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{z}_{2}^{(3)}}{\partial{a}_{1}^{(2)}}<br>})<br>\cdot<br>\color{violet}{<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>\\<br>&amp;=<br>[\color{violet}{<br>    \frac{\partial{z}^{(3)}}{\partial{a}_{1}^{(2)}}<br>}]^T<br>\cdot<br>\color{blue}{<br>    {\delta}^{(3)}<br>}<br>\cdot<br>\color{violet}{<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>\end{split}<br>$$</p><p>其实就是用前一层(第3层，即输出层)的各神经元的误差项对当前神经元的权重计算梯度再求和，不是很难，对吧？</p><p>同理，可以计算出对第二层各神经元的权重的求导的结果：</p><p>$$<br>\frac{\partial{E}}{\partial{w}_{1}^{(2)}} =<br>\color{violet}{<br>    [\frac{\partial{z}^{(3)}}{\partial{a}_{1}^{(2)}}]^T<br>    \cdot<br>    {\delta}^{(3)}<br>    \cdot<br>    \frac{\partial{a}_{1}^{(2)}}{\partial{z}_{1}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{1}^{(2)}}{\partial{w}_{1}^{(2)}}<br>\\<br>\frac{\partial{E}}{\partial{w}_{2}^{(2)}} =<br>\color{violet}{<br>    [\frac{\partial{z}^{(3)}}{\partial{a}_{2}^{(2)}}]^T<br>    \cdot<br>    {\delta}^{(3)}<br>    \cdot<br>    \frac{\partial{a}_{2}^{(2)}}{\partial{z}_{2}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{2}^{(2)}}{\partial{w}_{2}^{(2)}}<br>\\<br>\frac{\partial{E}}{\partial{w}_{3}^{(2)}} =<br>\color{violet}{<br>    [\frac{\partial{z}^{(3)}}{\partial{a}_{3}^{(2)}}]^T<br>    \cdot<br>    {\delta}^{(3)}<br>    \cdot<br>    \frac{\partial{a}_{3}^{(2)}}{\partial{z}_{3}^{(2)}}<br>}<br>\cdot<br>\frac{\partial{z}_{3}^{(2)}}{\partial{w}_{3}^{(2)}}<br>$$</p><p>我们分别将上述三个公式中紫色(别吵吵，我说是紫色就是紫色\傲娇脸)的部分记为第二层的各神经元的误差项，即${\delta}^{(2)}_{1}$、${\delta}^{(2)}_{2}$、${\delta}^{(2)}_{3}$。</p><p>同样的，上述三个式子可以合并为如下结果:</p><p>$$<br>\frac{\partial{E}}{\partial{w}^{(2)}} =<br>\color{violet}{<br>    [w^{(3)}]^T<br>    \cdot<br>    {\delta}^{(3)}<br>    \color{red}{<br>        .*<br>    }<br>    \frac{\partial{a}^{(2)}}{\partial{z}^{(2)}}<br>}<br>\cdot<br>[\frac{\partial{z}^{(2)}}{\partial{w}^{(2)}}]^T<br>$$</p><p>上述公式中紫色的部分即为第二层的误差项向量，即${\delta}^{(2)}$。</p><p>现在，我们已经完成了对网络中各层权重的误差梯度的计算，也定义了各层的误差项(注意输入层没有权重，也就不存在误差项)，为了更好的理解误差项，我们再回过头看一下我们先前计算的公式。公式中等号右侧的误差项后边跟随的总是当前层的$z$对某一变量的偏导(注意$z^{(i)} = {w^{(i)}}^Ta^{(i-1)} - {\theta}^{(i)} = {w^{(i)}}^Tf(z^{(i-1)}) - {\theta}^{(i)}$)。当我们要计算梯度进行更新时，我们用$z$对要更新的参数($w$或$\theta$)求偏导，此时相乘得到的结果为对应权重的梯度；当我们需要计算下一层的误差项时，我们用$z$对其中的激活函数$f$求导，此时相乘得到的结果为求导链中从当前层到下一层的”链路”。即，每一层的误差项就是求导链中，从最开始到当前层的决策位置为止的”链路”，决策位置就是说决策是继续展开链路还是计算当前层的权重梯度，即每一层的$z$的位置。(可能说的有点绕口，但你们绝对懂我的意思了￫ܫ￩)</p><p>现在知道误差项是什么了，那么，把上面的工作收个尾吧，全部算完会得到每一层的变量(也就是权重和梯度)的梯度如下:</p><p>$$<br>\frac{\partial{E}}{\partial{w}_{1}^{(3)}} = {\delta}^{(3)}_{1} \cdot a^{(2)}<br>\quad , \quad<br>\frac{\partial{E}}{\partial{w}_{2}^{(3)}} = {\delta}^{(3)}_{2} \cdot a^{(2)}<br>\quad , \quad<br>\frac{\partial{E}}{\partial{\theta}^{(3)}} = {\delta}^{(3)}<br>\\<br>\frac{\partial{E}}{\partial{w}_{1}^{(2)}} = {\delta}^{(2)}_{1} \cdot a^{(1)}<br>\quad , \quad<br>\frac{\partial{E}}{\partial{w}_{2}^{(2)}} = {\delta}^{(2)}_{2} \cdot a^{(1)}<br>\quad , \quad<br>\frac{\partial{E}}{\partial{w}_{3}^{(2)}} = {\delta}^{(2)}_{3} \cdot a^{(1)}<br>\quad , \quad<br>\frac{\partial{E}}{\partial{\theta}^{(2)}} = {\delta}^{(2)}<br>$$</p><p>(注意，上式中虽然每个子式的计算结果都是向量，但对权重的梯度计算的是<strong>对应层单个神经元</strong>的权重向量的梯度向量，而对阈值的梯度计算结果则是<strong>对应层整体</strong>的梯度向量。)</p><p>同时，我们提出各层误差的计算公式：</p><p>$$<br>{\delta}^{(3)}<br>=<br>\frac{\partial{E}}{\partial{a}^{(3)}} .* \frac{\partial{a}^{(3)}}{\partial{z}^{(3)}}<br>=<br>\frac{\partial{E}}{\partial{\hat{y}}} .* f’(z^{(3)})<br>\\<br>{\delta}^{(2)}<br>=<br>[w^{(3)}]^T \cdot {\delta}^{(3)} .* \frac{\partial{a}^{(2)}}{\partial{z}^{(2)}}<br>=<br>[w^{(3)}]^T \cdot {\delta}^{(3)} .* f’(z^{(2)})<br>$$</p><p>(注意，上式中的${\delta}^{(3)}$是输出层的误差项，${\delta}^{(2)}$是中间层的误差项)</p><p>现在，我们得到了示例中的3层网络中各神经元权重的梯度计算公式和各层的误差项计算公式。</p><p>更一般的，推广到多层网络，记$L$为网络总层数，$l$表示第$l$层且$l \lt L$，我们有以下递推和计算公式:</p><p>$$<br>\begin{split}<br>{\delta}^{(L)} &amp;= \frac{\partial{E}}{\partial{\hat{y}}} .* f’(z^{(L)}) = (a^{(L)} - y) .* f’(z^{(L)})<br>\\<br>{\delta}^{(l)} &amp;= [w^{(l+1)}]^T \cdot {\delta}^{(l+1)} .* f’(z^{(l)})<br>\\<br>\frac{\partial{E}}{\partial{w^{(l)}}} &amp;= {\delta}^{(l)} \cdot [a^{(l-1)}]^T<br>\\<br>\frac{\partial{E}}{\theta^{(l)}} &amp;= {\delta}^{(l)}<br>\end{split}<br>$$</p><p>上式中，无论是误差项还是梯度，都是以层为单位进行计算的，复杂点写，可以细分到以神经元为单位:</p><p>$$<br>\begin{split}<br>{\delta}^{(L)}_{i} &amp;= \frac{\partial{E}}{\partial{\hat{y}_{i}}} .* f’(z^{(L)}_{i}) = (a^{(L)}_{i} - y_{i}) .* f’(z^{(L)}_{i})<br>\\<br>{\delta}^{(l)}_{i} &amp;= \sum_{j=1}^{s_{l+1}}({\delta}_{j}^{(l+1)} \cdot w_{j,i}^{(l+1)}) f’(z^{(l)}_{i})<br>\\<br>\frac{\partial{E}}{\partial{w^{(l)}_{i,j}}} &amp;= {\delta}^{(l)}_{i} \cdot [a^{(l-1)}_{j}]^T<br>\\<br>\frac{\partial{E}}{\theta^{(l)}_{i}} &amp;= {\delta}^{(l)}_{i}<br>\end{split}<br>$$</p><p>至此，我们得到了误差逆传播算法的推导和计算公式，如果你还是对该公式是如何得到的没有一点感觉，那么，<del>&nbsp;一定是你智商不够，绝对不是我的水平太差或者表达能力有问题，绝对不是!（╯‵□′）╯︵┴─┴&nbsp;</del>，我建议你尝试手推下更为复杂的网络同时结合其他人的博文仔细看下，非常抱歉没有帮到你꒰๑´•.̫ • `๑꒱</p><h1 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h1><p>最开始，我是打算按照上述公式编写一个单隐层BP网络的，但是偶然间，看到了一位大佬的代码，才猛然醒悟，卧槽，利用矩阵的优势结合上述公式再稍加调整就可以一次用整个训练集的梯度误差进行更新，我还很死板的写了个循环遍历每一个训练集样本，依次对每个样本计算误差…果然是前一天ARMA3把脑子打傻了…</p><p>最终的Python代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid激励函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"><span class="comment"># sigmoid函数的导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    sigx = sigmoid(x)</span><br><span class="line">    <span class="keyword">return</span> sigx * (<span class="number">1</span> - sigx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性激励函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 线性激励函数导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_linear</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.ones_like(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单隐层简单BP网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BP</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, inputs, hiddens, outputs, h_act = sigmoid, h_dact = diff_sigmoid, o_act = linear, o_dact = diff_linear)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化BP网络</span></span><br><span class="line"><span class="string">        :param inputs: 输入层神经元个数(I)</span></span><br><span class="line"><span class="string">        :param hiddens: 隐层神经元个数(H)</span></span><br><span class="line"><span class="string">        :param outputs: 输出层神经元个数(O)</span></span><br><span class="line"><span class="string">        :param h_act: 隐层激励函数</span></span><br><span class="line"><span class="string">        :param h_dact: 隐层激励函数导数</span></span><br><span class="line"><span class="string">        :param o_act: 输出层激励函数</span></span><br><span class="line"><span class="string">        :param o_dact: 输出层激励函数导数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 初始化各层参数</span></span><br><span class="line">        self.inputs = inputs <span class="comment"># 输入层神经元数目</span></span><br><span class="line">        self.hiddens = hiddens <span class="comment"># 隐层神经元数目</span></span><br><span class="line">        self.outputs = outputs <span class="comment"># 输出层神经元数目</span></span><br><span class="line">        self.h_act = h_act  <span class="comment"># 配置隐层激励函数</span></span><br><span class="line">        self.h_dact = h_dact  <span class="comment"># 配置隐层激励函数导数</span></span><br><span class="line">        self.o_act = o_act <span class="comment"># 配置输出层激励函数</span></span><br><span class="line">        self.o_dact = o_dact <span class="comment"># 配置输出层激励函数导数</span></span><br><span class="line">        self.wh = np.random.rand(inputs, hiddens) <span class="comment"># 隐层神经元参数</span></span><br><span class="line">        self.wo = np.random.rand(hiddens, outputs) <span class="comment"># 输出层神经元参数</span></span><br><span class="line">        self.bh = np.random.rand(hiddens) <span class="comment"># 隐层输入的偏置</span></span><br><span class="line">        self.bo = np.random.rand(outputs) <span class="comment"># 输出层输入的偏置</span></span><br><span class="line">        self.last_xi = np.random.rand(inputs) <span class="comment"># 输入层最后一次输入(a0/x)</span></span><br><span class="line">        self.last_hi = np.random.rand(hiddens)  <span class="comment"># 隐层最后一次输入(z1)</span></span><br><span class="line">        self.last_ho = np.random.rand(hiddens)  <span class="comment"># 隐层最后一次输出(a1)</span></span><br><span class="line">        self.last_oi = np.random.rand(outputs) <span class="comment"># 输出层最后一次输入(z2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行一次数据传播</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proceed</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用N个样本构成的矩阵作为网络输入，返回网络输出</span></span><br><span class="line"><span class="string">        :param input: 输入向量(N*H矩阵)</span></span><br><span class="line"><span class="string">        :return: 网络输出(N*O矩阵)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 数据前传</span></span><br><span class="line">        h_in = input.dot(self.wh) + self.bh</span><br><span class="line">        h_out = self.h_act(h_in)</span><br><span class="line">        o_in = h_out.dot(self.wo) + self.bo</span><br><span class="line">        o_out = self.o_act(o_in)</span><br><span class="line">        <span class="comment"># 数据记录(用于误差反向传播)</span></span><br><span class="line">        self.last_xi = input <span class="comment"># 输入层输出(a^0)</span></span><br><span class="line">        self.last_hi = h_in <span class="comment"># 隐藏层z^1</span></span><br><span class="line">        self.last_ho = h_out <span class="comment"># 隐藏层a^1</span></span><br><span class="line">        self.last_oi = o_in <span class="comment"># 输出层z^2</span></span><br><span class="line">        <span class="keyword">return</span> o_out</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 误差反向传播</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">errorBackPropagation</span><span class="params">(self, BP_out, Y_out, rate)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        误差反向传播算法</span></span><br><span class="line"><span class="string">        :param BP_out: 网络的输出</span></span><br><span class="line"><span class="string">        :param Y_out: 标签的实际值</span></span><br><span class="line"><span class="string">        :param rate: 学习速率</span></span><br><span class="line"><span class="string">        :return: 均方误差</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 初始误差</span></span><br><span class="line">        delta0 = BP_out - Y_out <span class="comment"># 初始误差(其实可以直接整合到delta1)</span></span><br><span class="line">        delta1 = delta0 * self.o_dact(self.last_oi) <span class="comment"># 误差项1(N*O)</span></span><br><span class="line">        delta2 = delta1.dot(self.wo.T) * self.h_dact(self.last_hi) <span class="comment">#误差项2(N*H)</span></span><br><span class="line">        <span class="comment"># 更新各层的权重和偏置</span></span><br><span class="line">        N = BP_out.shape[<span class="number">0</span>]</span><br><span class="line">        self.wo -= rate * self.last_ho.T.dot(delta1) / N <span class="comment"># 输出层权重调整</span></span><br><span class="line">        self.bo -= rate * np.sum(delta1, axis=<span class="number">0</span>) / N <span class="comment"># 输出层偏执调整</span></span><br><span class="line">        self.wh -= rate * self.last_xi.T.dot(delta2) / N <span class="comment"># 隐层权重调整</span></span><br><span class="line">        self.bh -= rate * np.sum(delta2, axis=<span class="number">0</span>) / N <span class="comment"># 隐层偏置调整</span></span><br><span class="line">        square_error = np.sum(np.sum(delta0 ** <span class="number">2</span>, axis=<span class="number">0</span>), axis=<span class="number">0</span>) / N</span><br><span class="line">        <span class="keyword">return</span> square_error</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练BP网络</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, features, labels, lrate, max_steps, epsilon = <span class="number">0.01</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用N*I的数据训练BP网络，其中N为样本数目，I为输入数目</span></span><br><span class="line"><span class="string">        :param features: N*I特征矩阵</span></span><br><span class="line"><span class="string">        :param labels: N*O标签矩阵</span></span><br><span class="line"><span class="string">        :param lrate: 学习速率</span></span><br><span class="line"><span class="string">        :param max_steps: 最大迭代次数</span></span><br><span class="line"><span class="string">        :param epsilon: 收敛判断阈值</span></span><br><span class="line"><span class="string">        :return: 实际迭代次数，各次迭代的均方误差</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 输入特征和输出特征必须符合网络结构</span></span><br><span class="line">        <span class="keyword">assert</span> features.shape[<span class="number">1</span>] == self.inputs <span class="keyword">and</span> labels.shape[<span class="number">1</span>] == self.outputs</span><br><span class="line">        <span class="comment"># 误差记录</span></span><br><span class="line">        square_errors = []</span><br><span class="line">        <span class="comment"># 训练数据</span></span><br><span class="line">        last_se = bp.errorBackPropagation(bp.proceed(features), labels, lrate)</span><br><span class="line">        square_errors.append(last_se)</span><br><span class="line">        step_taken = max_steps + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> range(max_steps):</span><br><span class="line">            cur_se = bp.errorBackPropagation(bp.proceed(features), labels, lrate)</span><br><span class="line">            square_errors.append(cur_se)</span><br><span class="line">            <span class="comment"># 若"认为"均方误差已收敛则停止迭代</span></span><br><span class="line">            <span class="keyword">if</span> last_se &gt; cur_se <span class="keyword">and</span> last_se-cur_se &lt;= epsilon:</span><br><span class="line">                step_taken = step + <span class="number">2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            last_se = cur_se</span><br><span class="line">        <span class="keyword">return</span> step_taken, square_errors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明网络</span></span><br><span class="line">bp = BP(<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 生成训练集和测试集合 y=sin(x)</span></span><br><span class="line">train_X = np.array([[np.random.rand() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>)]]).T*<span class="number">2</span>*<span class="number">1.5</span> - <span class="number">1.5</span></span><br><span class="line">train_Y = np.sin(train_X)</span><br><span class="line">test_X = np.array([[np.random.rand() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]]).T *<span class="number">2</span>*<span class="number">1.5</span> - <span class="number">1.5</span></span><br><span class="line">test_Y = np.sin(test_X)</span><br><span class="line"><span class="comment"># 训练和预测</span></span><br><span class="line">steps, ses = bp.train(train_X, train_Y, lrate=<span class="number">0.5</span>, max_steps=<span class="number">3000</span>, epsilon=<span class="number">1e-7</span>)</span><br><span class="line">test_out = bp.proceed(test_X)</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 迭代次数-均方误差图</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">'Step-SquareError'</span>)</span><br><span class="line">plt.plot(range(<span class="number">1</span>,steps+<span class="number">1</span>), ses)</span><br><span class="line">plt.xlabel(<span class="string">'step'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'squareError'</span>)</span><br><span class="line"><span class="comment"># 真实值-预测值图</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">'Actual-Predict'</span>)</span><br><span class="line">plt.scatter(test_X.tolist(), test_Y.tolist(), c=<span class="string">'r'</span>, marker=<span class="string">'*'</span>)</span><br><span class="line">plt.scatter(test_X.tolist(), test_out.tolist(), c=<span class="string">'b'</span>, marker=<span class="string">'+'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.legend([<span class="string">'Y=sin(x)'</span>, <span class="string">'Y-predict'</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFA转DFA与DFA最小化(实验记录, 含java源码)</title>
      <link href="/2019/03/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-NFA%E8%BD%ACDFA%E4%B8%8EDFA%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
      <url>/2019/03/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-NFA%E8%BD%ACDFA%E4%B8%8EDFA%E6%9C%80%E5%B0%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>最近进行了编译原理的实验，实验的内容如标题所述，分为“将输入的NFA(不确定有穷自动机)转换为DFA(确定的有穷自动机)”以及“将输入的DFA最小化”两个部分。实验结束后，我对实验的相关信息进行了整理，总结出了这篇记录。本记录包含了实验说明、NFA转DFA以及DFA最小化的方法(实验原理)、java源码、以及若干输入输出样例。</p><a id="more"></a><h1 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h1><h2 id="试验内容"><a href="#试验内容" class="headerlink" title="试验内容"></a>试验内容</h2><p>实验分为以下两个部分:</p><ol><li>从文件中读取存储的NFA，并编程实现子集构造法将NFA转换为DFA。</li><li>从文件中读取存储的DFA，并编程实现等价划分法将读入的DFA最小化。</li></ol><h2 id="输入数据格式"><a href="#输入数据格式" class="headerlink" title="输入数据格式"></a>输入数据格式</h2><p>程序的输入来自txt文本文件，输入的内容包括：</p><ul><li>字符集中的字符个数及字符集中的字符</li><li>有穷自动机的状态个数及各个状态</li><li>开始的状态编号</li><li>接受状态个数及各接受状态</li><li>各状态在各输入符号下的转换状态集合</li></ul><p>其中，所有数量相关数据必须为整型，字符和状态可以为任意的不包含空格的字符串，字符间以及状态间不能有重复。</p><p>以下是输入数据格式的样例和相应的说明:</p><center><br><img src="InputExample.jpg" width="50%" height="80%" alt="输入NFA样例"><br></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">数据        说明                                 备注</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">2           字符集中的字符个数;</span><br><span class="line">a b         以空格分隔的字符集;                   每个字符可以为不含空格的字符串;</span><br><span class="line">4           状态个数;                            必须为整型;</span><br><span class="line">1 2 3 4     以空格分隔的状态编号;                 各状态可以为不含空格的字符串(下同);</span><br><span class="line">1           开始状态编号;</span><br><span class="line">1           结束状态个数;                        必须为整型;</span><br><span class="line">3           以空格分隔的结束状态编号;</span><br><span class="line">3 2 1       状态的转换集合，转换集合以行为单位     对于NFA，则每行的集合数目为输入符号个数加</span><br><span class="line">-1 1 -1     按照输入的顺序对应各状态，每行的每     一，第一个对应epsilon，之后的按照输入顺序</span><br><span class="line">-1 3 4      个集合按照输入顺序相应的输入符号，     对应于各符号，对于DFA则不包含epsilon，每</span><br><span class="line">-1 -1 3     各集合间使用空格分隔，单个集合内如     行的集合数目等于输入符号数目;</span><br><span class="line">            果存在多个状态则使用逗号分隔，某个</span><br><span class="line">            集合内没有相应的转换状态则输入-1;</span><br></pre></td></tr></table></figure><h2 id="输出说明"><a href="#输出说明" class="headerlink" title="输出说明"></a>输出说明</h2><p>输出中应包含形成DFA的以下内容：</p><ul><li>状态列表(包含各新状态的编号以及对应的原状态的集合)</li><li>开始状态</li><li>结束状态集合</li><li>状态转换表(可以参考输入数据中的表示方式)</li></ul><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="NFA转DFA-子集构造法"><a href="#NFA转DFA-子集构造法" class="headerlink" title="NFA转DFA(子集构造法)"></a>NFA转DFA(子集构造法)</h2><p>记输入NFA为N，输出的DFA为D (注意，<strong>DFA中每个状态对应原NFA中的一个或多个状态的集合</strong>)。定义转换表Dtran，Dtran[T, a]表示DFA的某个状态集合T在输入a时转换到达的状态的集合。<br>定义如下操作:</p><ul><li><strong>e-closure(s)</strong>: 从状态s开始只通过epsilon转换可达的状态的集合(可以视为状态s在自动机上的epsilon闭包)</li><li><strong>e-closure(T)</strong>: 状态集合T中的所有状态只通过epsilon转换可达的状态的集合(同上)</li><li><strong>move(T, a)</strong>: 状态集合T中的所有状态在输入为a时转换可达的状态的集合(仅单次转换, 并非在a上的闭包)</li></ul><p>则有子集构造法的伪代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">定义Dstates，表示D的状态集合</span><br><span class="line">将e-closure(s0)加入Dstate，其中s0为N的开始状态</span><br><span class="line"><span class="keyword">while</span>(在Dstates中有一个未标记的状态T)</span><br><span class="line">&#123;</span><br><span class="line">    给T加上标记;</span><br><span class="line">    <span class="keyword">for</span>(每个输入符号a) </span><br><span class="line">    &#123;</span><br><span class="line">        U = e-closure(move(T,a));</span><br><span class="line">        <span class="keyword">if</span>(U不在Dstates中)</span><br><span class="line">        &#123;</span><br><span class="line">            将U加入到Dstates中，且不加标记；</span><br><span class="line">        &#125;</span><br><span class="line">        Dtran[T,a] = U;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的DFA的开始状态就是伪代码中的e-closure(s0)，结束状态是DFA的状态中所有包含了原NFA的结束状态的状态。</p><h2 id="DFA最小化-等价划分法"><a href="#DFA最小化-等价划分法" class="headerlink" title="DFA最小化(等价划分法)"></a>DFA最小化(等价划分法)</h2><p>首先，我们对DFA的所有状态进行分组，初始化时，我们将其分为接受状态组和非接受状态组，其中接受状态组由原NFA中所有的接受状态组成，非接受状态组由其余状态构成。</p><p>对于每个分组，当对于所有输入符号，分组内的所有状态在输入符号相同时均能转换到相同的分组，则我们认为分组内的所有状态等价，否则我们根据转换到达的分组对当前分组内的状态进行重新划分。</p><p>不断对分组列表中的各分组按照上述方法进行划分，当不能继续划分分组时，划分完成。此时，对最终的各分组进行编号，对应新的DFA的各个状态。从每个分组中任选一个代表，以该代表在符号a上的输入跳转到的分组作为该分组在输入符号a上的转换到的状态，按此规则构建各个新状态在各符号上的转换所达状态，最终得到最小化后的DFA，最终的DFA中开始状态是包含了原DFA开始状态的分组，结束状态是所有包含了原DFA结束状态的分组。</p><p>该等价划分法伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">构建分组集合Groups，初始化时其中仅包含接受状态组和非接受状态组</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(Groups中的每个分组g)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(符号集中的每个符号a)</span><br><span class="line">        &#123;</span><br><span class="line">            令tempGroups为g关于符号a的分组划分</span><br><span class="line">            <span class="keyword">if</span>(tempGroups中包含两个即以上的分组)</span><br><span class="line">            &#123;</span><br><span class="line">                使用tempGroups中的所有分组替换Groups中的g;</span><br><span class="line">                记录进行了分组拆分;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span>(Groups中的分组发生了拆分);</span><br></pre></td></tr></table></figure><h1 id="java代码及说明"><a href="#java代码及说明" class="headerlink" title="java代码及说明"></a>java代码及说明</h1><h2 id="NFA转DFA"><a href="#NFA转DFA" class="headerlink" title="NFA转DFA"></a>NFA转DFA</h2><h3 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h3><p>首先，根据子集构造法，注意到生成的DFA的每一个状态对应的是原NFA中的一个或多个状态的集合，而该构造法中涉及到多次判断状态集合是否已存在，考虑将状态集合视为一个bit数组，每个bit对应一个状态，如果该状态包含在集合中则该状态置为1，否则置为0，每32个bit可以存放在一个int型中，这样比较两个集合是否相等可以转换为若干int型数据的比较。我本来是打算直接使用java中的BitSet，可能是我水平太渣了，总感觉java的BitSet用起来有点“不对口”，于是，自己写了一个简陋BitSet。<br>由于这个类实在是简单，我就不进行说明了，直接上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.StringBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSet</span> //用于表示状态的集合</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> BitSize; <span class="comment">//状态数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> AryLength;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [] BitAry; <span class="comment">//存储状态数据的整形数组(包含第i个状态则第i位为1否则为0)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cleanBrush; <span class="comment">//用于将int数组中多余位清零的清位刷子</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">int</span> size)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid index of \''"</span> + size + <span class="string">"\'!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.BitSize = size;</span><br><span class="line">        <span class="keyword">this</span>.AryLength = (size-<span class="number">1</span>) / <span class="number">32</span> + <span class="number">1</span>;</span><br><span class="line">        BitAry = <span class="keyword">new</span> <span class="keyword">int</span>[AryLength];</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; AryLength;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BitAry[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//构建清位刷子</span></span><br><span class="line">        cleanBrush = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> zeroLen = (<span class="number">32</span> - size % <span class="number">32</span>) % <span class="number">32</span>;</span><br><span class="line">        cleanBrush &gt;&gt;= zeroLen;</span><br><span class="line">        cleanBrush &lt;&lt;= zeroLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取集合bit位数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BitSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取int[]形式的bit数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] GetBitArray()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> BitAry.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查第i位是否已被置位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsSet</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= BitSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid index of \''"</span> + index + <span class="string">"\'!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> AryPos = index / <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">int</span> BitPos = <span class="number">1</span> &lt;&lt; (<span class="number">31</span> - index % <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">return</span> (BitAry[AryPos] &amp; BitPos) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将第index位置为1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> index)</span>  <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= BitSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid index of \''"</span> + index + <span class="string">"\'!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> AryPos = index / <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">int</span> BitPos = <span class="number">1</span> &lt;&lt; (<span class="number">31</span> - index % <span class="number">32</span>);</span><br><span class="line">        BitAry[AryPos] |= BitPos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将第index位置为0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= BitSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid index of \''"</span> + index + <span class="string">"\'!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> AryPos = index / <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">int</span> BitPos = <span class="number">1</span> &lt;&lt; (<span class="number">31</span> - index % <span class="number">32</span>);</span><br><span class="line">        BitPos = ~BitPos;</span><br><span class="line">        BitAry[AryPos] &amp;= BitPos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断两个BitSet是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">EqualTo</span><span class="params">(BitSet AnotherSet)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.BitSize != AnotherSet.BitSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] AnotherAry = AnotherSet.GetBitArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; AryLength; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(BitAry[i] != AnotherAry[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查是否有比特被置位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsAnySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; AryLength; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += BitAry[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与另一个BitSet的与操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">And</span><span class="params">(BitSet AnotherSet)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = Math.min(AryLength, AnotherSet.AryLength);</span><br><span class="line">        <span class="keyword">int</span> [] AnotherAry = AnotherSet.GetBitArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BitAry[i] &amp;= AnotherAry[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cleanUseless();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与另一个BitSet的或操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Or</span><span class="params">(BitSet AnotherSet)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = Math.min(AryLength, AnotherSet.AryLength);</span><br><span class="line">        <span class="keyword">int</span> [] AnotherAry = AnotherSet.GetBitArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BitAry[i] |= AnotherAry[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cleanUseless();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全部置为0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; AryLength; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BitAry[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全部置为1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; AryLength; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BitAry[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cleanUseless();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转为二进制格式的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ToBinaryString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder(BitSize);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; AryLength; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">31</span>;j &gt;= <span class="number">0</span> &amp;&amp; count++ &lt; BitSize;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                res.append((BitAry[i] &gt;&gt; j) &amp; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空int数组中分配的多余位上的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cleanUseless</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BitAry[AryLength -<span class="number">1</span>] &amp;= cleanBrush;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然质量可能不怎么样吧，但至少能用…</p><h3 id="类成员总览"><a href="#类成员总览" class="headerlink" title="类成员总览"></a>类成员总览</h3><p>我将实现NFA转DFA的类命名为NFA2DFA，该类用到的包及类的成员如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">pblic <span class="class"><span class="keyword">class</span> <span class="title">NFA2DFA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; SignList; <span class="comment">//符号列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; NFA_StateList; <span class="comment">//NFA状态列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> NFA_StartStateIndex; <span class="comment">//NFA开始状态</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; NFA_EndList; <span class="comment">//NFA结束状态列表</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;BitSet&gt;&gt; NFA_AdjacencyTable; <span class="comment">//NFA邻接表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;BitSet&gt; DFA_StateList; <span class="comment">//DFA状态列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> DFA_StartState; <span class="comment">//DFA开始状态</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; DFA_EndList; <span class="comment">//DFA结束状态列表</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; DFA_AdjacencyTable; <span class="comment">//DFA邻接表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NFA2DFA</span><span class="params">()</span></span>; <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadData</span><span class="params">(String FilePath)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//从文件中读取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transition</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//进行转换操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//输出结果</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BitSet <span class="title">epsilonClosure</span><span class="params">(BitSet curState)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//计算输入状态的epsilon闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BitSet <span class="title">move</span><span class="params">(BitSet curState, <span class="keyword">int</span> signIndex)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//从当前状态curState经过signIndex对应的符号所能到达的所有状态的集合</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearData</span><span class="params">()</span></span>; <span class="comment">//清除所有数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量部分个人认为就不需要介绍了，看注释也基本上知道是什么了，下面对各个函数进行说明。</p><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><h4 id="NFA2DFA-构造函数"><a href="#NFA2DFA-构造函数" class="headerlink" title="NFA2DFA()构造函数"></a>NFA2DFA()构造函数</h4><p>构造函数，构建各个变量。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NFA2DFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//符号表</span></span><br><span class="line">    SignList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">//NFA部分</span></span><br><span class="line">    NFA_StateList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    NFA_StartStateIndex = <span class="number">0</span>;</span><br><span class="line">    NFA_EndList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    NFA_AdjacencyTable = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;BitSet&gt;&gt;(); </span><br><span class="line">    <span class="comment">//DFA部分</span></span><br><span class="line">    DFA_StateList = <span class="keyword">new</span> ArrayList&lt;BitSet&gt;();</span><br><span class="line">    DFA_StartState = <span class="number">0</span>;</span><br><span class="line">    DFA_EndList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    DFA_AdjacencyTable = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="clearData-函数"><a href="#clearData-函数" class="headerlink" title="clearData()函数"></a>clearData()函数</h4><p>该函数的功能就是清除存储在变量中的各数据，便于读入新数据。实现该函数主要是考虑到该类的对象可能需要读入新的NFA进行第二次计算。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//符号表</span></span><br><span class="line">    SignList.clear();</span><br><span class="line">    <span class="comment">//NFA部分</span></span><br><span class="line">    NFA_StateList.clear();</span><br><span class="line">    NFA_StartStateIndex = <span class="number">0</span>;</span><br><span class="line">    NFA_EndList.clear();</span><br><span class="line">    NFA_AdjacencyTable.clear();</span><br><span class="line">    <span class="comment">//DFA部分</span></span><br><span class="line">    DFA_StateList.clear();</span><br><span class="line">    DFA_StartState = <span class="number">0</span>;</span><br><span class="line">    DFA_EndList.clear();</span><br><span class="line">    DFA_AdjacencyTable.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReadData-String-FilePath-函数"><a href="#ReadData-String-FilePath-函数" class="headerlink" title="ReadData(String FilePath)函数"></a>ReadData(String FilePath)函数</h4><p>该函数功能是从文件中读入数据，先使用File类打开文件，并判断文件是否存在。之后使用FileReader以及Scanner类将其包装成输入流，便于读取数据，之后就是按照数据的输入格式依次读取数据就行了，这里我偷了个懒，没有处理如果输入的格式不对或缺少数据的情况XD。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从文件中读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadData</span><span class="params">(String FilePath)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clearData(); <span class="comment">//有可能是读入新数据，先清除就数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件输入流</span></span><br><span class="line">    File NFAFile = <span class="keyword">new</span> File(FilePath);</span><br><span class="line">    <span class="keyword">if</span>(!NFAFile.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Input file not found!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FileReader NFAReader = <span class="keyword">new</span> FileReader(NFAFile);</span><br><span class="line">    Scanner NFAInput = <span class="keyword">new</span> Scanner(NFAReader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入符号</span></span><br><span class="line">    <span class="keyword">int</span> SignCount = NFAInput.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SignCount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SignList.add(NFAInput.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入状态</span></span><br><span class="line">    <span class="keyword">int</span> StateCount = NFAInput.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; StateCount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        NFA_StateList.add(NFAInput.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入开始状态</span></span><br><span class="line">    NFA_StartStateIndex = NFA_StateList.indexOf(NFAInput.next());</span><br><span class="line">    <span class="comment">//读入结束状态</span></span><br><span class="line">    <span class="keyword">int</span> EndCount = NFAInput.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; EndCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        NFA_EndList.add(NFA_StateList.indexOf(NFAInput.next()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入各边数据，构建邻接表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; StateCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;BitSet&gt; curLine = <span class="keyword">new</span> ArrayList&lt;BitSet&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= SignCount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            BitSet curSet = <span class="keyword">new</span> BitSet(StateCount);</span><br><span class="line">            String [] curState = NFAInput.next().split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">for</span>(String x : curState)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!x.equals(<span class="string">"-1"</span>)) <span class="comment">//状态集合不为空</span></span><br><span class="line">                &#123;</span><br><span class="line">                    curSet.Set(NFA_StateList.indexOf(x));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curLine.add(curSet);</span><br><span class="line">        &#125;</span><br><span class="line">        NFA_AdjacencyTable.add(curLine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NFAInput.close();</span><br><span class="line">    NFAReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transition-函数"><a href="#Transition-函数" class="headerlink" title="Transition()函数"></a>Transition()函数</h4><p>该函数使用读入的数据进行转换，转换后的结果被存放在相应的成员变量中。函数首先判断是否进行了读取数据的操作，没有则抛出异常；之后函数按照子集构造法的流程进行，先计算开始状态闭包，之后从新的开始状态集合开始依次处理。最后整理新状态中的结束状态。<br>这里我并没有使用标记来标识状态是否处理，我的想法是使用ArrayList，从数组的首部遍历到数组的结尾，将新状态追加到数组的尾部，这样就能保证对数组的一次遍历即可处理完所有的状态，由于数组的长度会随遍历处理的过程中新状态的产生而增加，所以for循环的循环变量上限是DFA_StateList.size()，而不是常数。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transition</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(NFA_StateList.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Read data before starting Transition!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取开始状态</span></span><br><span class="line">    BitSet StartSet = epsilonClosure(NFA_AdjacencyTable.get(NFA_StartStateIndex).get(<span class="number">0</span>));</span><br><span class="line">    StartSet.Set(NFA_StartStateIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置开始状态</span></span><br><span class="line">    DFA_StartState = <span class="number">0</span>;</span><br><span class="line">    DFA_StateList.add(StartSet);</span><br><span class="line"></span><br><span class="line">    BitSet curSet, newSet;</span><br><span class="line">    <span class="keyword">int</span> SignCount = SignList.size();</span><br><span class="line">    <span class="keyword">boolean</span> contain;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DFA_StateList.size(); i++) <span class="comment">//遍历所有状态</span></span><br><span class="line">    &#123;</span><br><span class="line">        DFA_AdjacencyTable.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        curSet = DFA_StateList.get(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SignCount; j++) <span class="comment">//依次处理各符号</span></span><br><span class="line">        &#123;</span><br><span class="line">            newSet = epsilonClosure(move(curSet, j));</span><br><span class="line">            <span class="keyword">if</span>(!newSet.IsAnySet()) <span class="comment">//当前状态转换集合为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                DFA_AdjacencyTable.get(i).add(-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            contain = <span class="keyword">false</span>;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(BitSet check : DFA_StateList) <span class="comment">//检查所达集合是否存在</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(check.EqualTo(newSet))</span><br><span class="line">                &#123;</span><br><span class="line">                    contain = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!contain) <span class="comment">//不存在则追加</span></span><br><span class="line">            &#123;</span><br><span class="line">                DFA_StateList.add(newSet);</span><br><span class="line">            &#125;</span><br><span class="line">            DFA_AdjacencyTable.get(i).add(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取接受状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DFA_StateList.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BitSet state = DFA_StateList.get(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> endIndex : NFA_EndList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(state.IsSet(endIndex))</span><br><span class="line">            &#123;</span><br><span class="line">                DFA_EndList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="epsilonClosure-BitSet-curState-函数"><a href="#epsilonClosure-BitSet-curState-函数" class="headerlink" title="epsilonClosure(BitSet curState)函数"></a>epsilonClosure(BitSet curState)函数</h4><p>该函数用于计算输入状态curState的epsilon闭包，有多种实现方法，我的实现方案是使用带标记位的BFS，此处我使用了while循环代替了递归调用。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//epsilon闭包</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BitSet <span class="title">epsilonClosure</span><span class="params">(BitSet curState)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = curState.GetSize();</span><br><span class="line">    BitSet result = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">    result.Or(curState); <span class="comment">//包含原状态集合</span></span><br><span class="line">    BitSet mark = <span class="keyword">new</span> BitSet(size); <span class="comment">//处理标记</span></span><br><span class="line">    <span class="keyword">boolean</span> addNew = <span class="keyword">true</span>;</span><br><span class="line">    BitSet temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(addNew) <span class="comment">//循环直到没有新状态加入</span></span><br><span class="line">    &#123;</span><br><span class="line">        addNew = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(result.IsSet(i) &amp;&amp; !mark.IsSet(i))</span><br><span class="line">            &#123;</span><br><span class="line">                mark.Set(i);</span><br><span class="line">                temp = NFA_AdjacencyTable.get(i).get(<span class="number">0</span>); <span class="comment">//当前状态经epsilon转换可达的状态集合</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = size - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp.IsSet(j) &amp;&amp; !result.IsSet(j)) <span class="comment">//发现了新状态</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        result.Set(j);</span><br><span class="line">                        addNew = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="move-BitSet-curState-int-signIndex-函数"><a href="#move-BitSet-curState-int-signIndex-函数" class="headerlink" title="move(BitSet curState, int signIndex)函数"></a>move(BitSet curState, int signIndex)函数</h4><p>该函数用于计算从当前状态集合curState经下标为signIndex的输入符号转换可达的状态集合，实现起来就是一次BFS，连递归调用都免了。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从当前状态curState经过signIndex对应的符号所能到达的所有状态的集合</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BitSet <span class="title">move</span><span class="params">(BitSet curState, <span class="keyword">int</span> signIndex)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BitSet result = <span class="keyword">new</span> BitSet(curState.GetSize());</span><br><span class="line">    BitSet temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = curState.GetSize() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(curState.IsSet(i))</span><br><span class="line">        &#123;</span><br><span class="line">            temp = NFA_AdjacencyTable.get(i).get(signIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = temp.GetSize()-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp.IsSet(j))</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Set(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ShowResult-函数"><a href="#ShowResult-函数" class="headerlink" title="ShowResult()函数"></a>ShowResult()函数</h4><p>该函数就是打印输出结果，我又偷了个懒，没有按照DFA的存储格式输出到文件，直接输出到控制台了XD</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(DFA_StateList.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Start transition before displaying result!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出DFA的所有状态集合</span></span><br><span class="line">    System.out.println(<span class="string">"DFA State List:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DFA_StateList.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BitSet curSet = DFA_StateList.get(i);</span><br><span class="line">        System.out.print(<span class="string">"StateId: "</span> + i + <span class="string">"\tContainedNFAState: "</span>);</span><br><span class="line">        <span class="keyword">if</span>(!curSet.IsAnySet())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; curSet.GetSize(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(curSet.IsSet(j))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print(NFA_StateList.get(j) + <span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出开始状态集合</span></span><br><span class="line">    System.out.println(<span class="string">"\nStart State: "</span> + DFA_StartState);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出终结状态集合</span></span><br><span class="line">    System.out.print(<span class="string">"End State List: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : DFA_EndList)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出集合关系</span></span><br><span class="line">    System.out.println(<span class="string">"\nAdjacency Relation:"</span>);</span><br><span class="line">    System.out.print(<span class="string">"Id\t"</span>);</span><br><span class="line">    <span class="keyword">for</span>(String x : SignList)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(x + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DFA_AdjacencyTable.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; x = DFA_AdjacencyTable.get(i);</span><br><span class="line">        System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y : x)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(y + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行说明"><a href="#运行说明" class="headerlink" title="运行说明"></a>运行说明</h3><p>在主函数中，声明并创建一个NFA2DFA对象，依次调用对象的<code>ReadData(String FilePath)</code>、<code>Transition()</code>和<code>ShowResult()</code>函数即可。由于我在类的成员函数中使用了throw语句抛出异常，如果懒得使用try-catch包围就直接在main函数throws Exception吧…</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NFA2DFA n2d = <span class="keyword">new</span> NFA2DFA();</span><br><span class="line">    n2d.ReadData(<span class="string">"NFA.txt"</span>);</span><br><span class="line">    n2d.Transition();</span><br><span class="line">    n2d.ShowResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DFA最小化"><a href="#DFA最小化" class="headerlink" title="DFA最小化"></a>DFA最小化</h2><h3 id="类成员总览-1"><a href="#类成员总览-1" class="headerlink" title="类成员总览"></a>类成员总览</h3><p>实现DFA最小化的类被我命名为MinimizeDFA，该类用到的包及类的成员如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinimizeDFA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; SignList; <span class="comment">//符号列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; DFA_StateList; <span class="comment">//DFA状态列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> DFA_StartState; <span class="comment">//DFA开始状态</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; DFA_EndList; <span class="comment">//DFA结束状态列表</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; DFA_AdjacencyTable; <span class="comment">//DFA邻接表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;ArrayList&lt;Integer&gt;&gt; MDFA_Group; <span class="comment">//最小化DFA的分组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MDFA_StartState; <span class="comment">//最小化DFA的开始状态</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; MDFA_EndList; <span class="comment">//最小化DFA的结束状态列表</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; MDFA_AdjacencyTable; <span class="comment">//最小化DFA的邻接表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinimizeDFA</span><span class="params">()</span></span>; <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadData</span><span class="params">(String FilePath)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//从文件中读取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Minimize</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//最小化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowResult</span><span class="params">()</span></span>; <span class="comment">//输出结果</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearData</span><span class="params">()</span></span>; <span class="comment">//清除所有数据</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; GroupUp(ArrayList&lt;Integer&gt; curGroup, <span class="keyword">int</span> signIndex); <span class="comment">//对当前的分组curGroup按照下标为signIndex的输入符号进行分组划分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要说明的是，这个类没有使用自定义的辅助类型BitSet，此外，由于分组列表需要进行多次拆分操作，涉及到多次的随机删除和插入，所以我使用了LinkedList而不是ArrayList来存放分组列表。</p><h3 id="函数说明-1"><a href="#函数说明-1" class="headerlink" title="函数说明"></a>函数说明</h3><h4 id="MinimizeDFA-函数"><a href="#MinimizeDFA-函数" class="headerlink" title="MinimizeDFA()函数"></a>MinimizeDFA()函数</h4><p>构造函数，构建各成员变量。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MinimizeDFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//符号表</span></span><br><span class="line">    SignList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">//NFA部分</span></span><br><span class="line">    DFA_StateList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    DFA_StartState = <span class="number">0</span>;</span><br><span class="line">    DFA_EndList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    DFA_AdjacencyTable = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="comment">//MNFA部分</span></span><br><span class="line">    MDFA_Group = <span class="keyword">new</span> LinkedList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    MDFA_StartState = <span class="number">0</span>;</span><br><span class="line">    MDFA_EndList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    MDFA_AdjacencyTable = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="clearData-函数-1"><a href="#clearData-函数-1" class="headerlink" title="clearData()函数"></a>clearData()函数</h4><p>与NFA2DFA的情况相同，考虑到可能二次读取数据，提供一个清空成员变量的函数。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//符号表</span></span><br><span class="line">    SignList.clear();</span><br><span class="line">    <span class="comment">//NFA部分</span></span><br><span class="line">    DFA_StateList.clear();</span><br><span class="line">    DFA_StartState = <span class="number">0</span>;</span><br><span class="line">    DFA_EndList.clear();</span><br><span class="line">    DFA_AdjacencyTable.clear();</span><br><span class="line">    <span class="comment">//MNFA部分</span></span><br><span class="line">    MDFA_Group.clear();</span><br><span class="line">    MDFA_StartState = <span class="number">0</span>;</span><br><span class="line">    MDFA_EndList.clear();</span><br><span class="line">    MDFA_AdjacencyTable.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReadData-String-FilePath-函数-1"><a href="#ReadData-String-FilePath-函数-1" class="headerlink" title="ReadData(String FilePath)函数"></a>ReadData(String FilePath)函数</h4><p>与NFA2DFA类似，从文件中读入数据。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadData</span><span class="params">(String FilePath)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clearData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件输入流</span></span><br><span class="line">    File DFAFile = <span class="keyword">new</span> File(FilePath);</span><br><span class="line">    <span class="keyword">if</span>(!DFAFile.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Input file not found!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FileReader DFAReader = <span class="keyword">new</span> FileReader(DFAFile);</span><br><span class="line">    Scanner DFAInput = <span class="keyword">new</span> Scanner(DFAReader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入符号</span></span><br><span class="line">    <span class="keyword">int</span> SignCount =  DFAInput.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SignCount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SignList.add( DFAInput.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入状态</span></span><br><span class="line">    <span class="keyword">int</span> StateCount =  DFAInput.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; StateCount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            DFA_StateList.add( DFAInput.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入开始状态</span></span><br><span class="line">        DFA_StartState =  DFA_StateList.indexOf( DFAInput.next());</span><br><span class="line">    <span class="comment">//读入结束状态</span></span><br><span class="line">    <span class="keyword">int</span> EndCount =  DFAInput.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; EndCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">            DFA_EndList.add( DFA_StateList.indexOf( DFAInput.next()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入各边数据，构建邻接表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; StateCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; curLine = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SignCount; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            String state = DFAInput.next();</span><br><span class="line">            <span class="keyword">if</span>(state.equals(<span class="string">"-1"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                curLine.add(-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                curLine.add(DFA_StateList.indexOf(state));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DFA_AdjacencyTable.add(curLine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        DFAInput.close();</span><br><span class="line">        DFAReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Minimize-函数"><a href="#Minimize-函数" class="headerlink" title="Minimize()函数"></a>Minimize()函数</h4><p>该函数根据等价划分法，对DFA进行最小化。各分组采用<code>ArrayList&lt;Integer&gt;</code>保存，数组内的数据是该分组包含的状态在状态列表中的下标；分组被存放在分组列表，该列表使用<code>LinkedList&lt;ArrayList&lt;Integer&gt;&gt;</code>来实现。</p><p>函数先将输入状态分为接受状态组和非接受状态组，之后使用while循环不断对分组列表中的各分组进行划分操作。由于每当一个分组发生了分裂就可能造成先前处理过的分组也发生分裂，因此需要不断循环遍历分组列表来进行处理，直到在一次遍历中没有分组发生分裂为止。</p><p>在划分完成后，分组唯一确定，此时每个分组就是最小化后的DFA中的一个状态。函数默认使用各分组中的第一个状态作为该分组的代表，以代表在各输入符号上的转换情况表示整个分组在各符号上的转换情况，来构建最小化后的DFA的状态转换表。</p><p>最后函数循环遍历分组列表以确定最小化后的DFA的开始状态和接受状态集合。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行最小化操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Minimize</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> StateCount = DFA_StateList.size();</span><br><span class="line">    <span class="keyword">int</span> SignCount = SignList.size();</span><br><span class="line">    ArrayList&lt;Integer&gt; endGroup = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">//接受状态组</span></span><br><span class="line">    ArrayList&lt;Integer&gt; otherGroup = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">//非接受状态组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; StateCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(DFA_EndList.contains(i))</span><br><span class="line">        &#123;</span><br><span class="line">            endGroup.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            otherGroup.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MDFA_Group.add(endGroup);</span><br><span class="line">    MDFA_Group.add(otherGroup);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    <span class="keyword">boolean</span> split = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(split)</span><br><span class="line">    &#123;</span><br><span class="line">        split = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(ArrayList&lt;Integer&gt; group : MDFA_Group) <span class="comment">//遍历各分组</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SignCount; i++) <span class="comment">//对当前分组依次使用各符号处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                ArrayList&lt;ArrayList&lt;Integer&gt;&gt;  splitGroup = GroupUp(group, i);</span><br><span class="line">                <span class="keyword">if</span>(splitGroup.size() == <span class="number">1</span>) <span class="comment">//未发生分裂(分组内元素仍被划分至同一组)</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    split = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//删除旧分组，插入新分组</span></span><br><span class="line">                    MDFA_Group.remove(group);</span><br><span class="line">                    <span class="keyword">for</span>(ArrayList&lt;Integer&gt; newGroup : splitGroup)</span><br><span class="line">                    &#123;</span><br><span class="line">                        MDFA_Group.add(newGroup);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(split) <span class="comment">//发生分裂则跳出循环从头开始处理(下同)</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(split)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为分组创建邻接表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MDFA_Group.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; curLine = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> stateIndex = MDFA_Group.get(i).get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ToIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SignList.size(); j++) <span class="comment">//依次处理各符号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ToIndex = DFA_AdjacencyTable.get(stateIndex).get(j);</span><br><span class="line">            <span class="keyword">if</span>(ToIndex == -<span class="number">1</span>) <span class="comment">//分组在该符号上没有转换则存入-1</span></span><br><span class="line">            &#123;</span><br><span class="line">                curLine.add(-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//否则确定分组下标</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MDFA_Group.size(); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(MDFA_Group.get(k).contains(ToIndex))</span><br><span class="line">                    &#123;</span><br><span class="line">                        curLine.add(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MDFA_AdjacencyTable.add(curLine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取开始状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MDFA_Group.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; curGroup = MDFA_Group.get(i);</span><br><span class="line">        <span class="keyword">if</span>(curGroup.contains(DFA_StartState))</span><br><span class="line">        &#123;</span><br><span class="line">            MDFA_StartState = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取接受状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MDFA_Group.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; curGroup = MDFA_Group.get(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> endState : DFA_EndList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(curGroup.contains(endState))</span><br><span class="line">            &#123;</span><br><span class="line">                MDFA_EndList.add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GroupUp-ArrayList-curGroup-int-signIndex-函数"><a href="#GroupUp-ArrayList-curGroup-int-signIndex-函数" class="headerlink" title="GroupUp(ArrayList curGroup, int signIndex)函数"></a>GroupUp(ArrayList<integer> curGroup, int signIndex)函数</integer></h4><p>该函数是Minimize()函数的辅助函数，功能是针对输入的分组curGroup使用下标为signIndex的输入符号对该分组内的状态进行重划分，最后返回新的分组集合。我的做法是先计算出输入分组内各状态在该符号下跳转到的分组的下标，每获取到一个下标就检查该下标是否已有，没有则记录该下标并为其创建一个分组。最后遍历输入分组中的各状态，并将其放入其转换到的下标的分组中，最后返回生成的所有分组。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分组辅助函数，返回按当前符号进行划分的分组</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; GroupUp(ArrayList&lt;Integer&gt; curGroup, <span class="keyword">int</span> signIndex)</span><br><span class="line">&#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; groups = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(); <span class="comment">//分组集合</span></span><br><span class="line">    ArrayList&lt;Integer&gt; correspondId = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">//分组集合中各分组对应的转换到的id</span></span><br><span class="line">    </span><br><span class="line">    ArrayList&lt;Integer&gt; ToList= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : curGroup)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ToStateIndex = DFA_AdjacencyTable.get(x).get(signIndex);</span><br><span class="line">        <span class="keyword">int</span> ToGroupId = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//确定各状态的去向</span></span><br><span class="line">        <span class="keyword">if</span>(ToStateIndex == -<span class="number">1</span>) <span class="comment">//没有相应转换则去向为-1</span></span><br><span class="line">        &#123;</span><br><span class="line">            ToGroupId = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = MDFA_Group.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">//遍历各分组以确定去向</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(MDFA_Group.get(i).contains(ToStateIndex))</span><br><span class="line">                &#123;</span><br><span class="line">                    ToGroupId = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ToList.add(ToGroupId);</span><br><span class="line">        <span class="keyword">if</span>(!correspondId.contains(ToGroupId)) <span class="comment">//检查去向是否已有</span></span><br><span class="line">        &#123;</span><br><span class="line">            correspondId.add(ToGroupId);</span><br><span class="line">            groups.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; curGroup.size(); i++) <span class="comment">//将状态放入相应去向的分组中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = correspondId.indexOf(ToList.get(i));</span><br><span class="line">        groups.get(index).add(curGroup.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ShowResult-函数-1"><a href="#ShowResult-函数-1" class="headerlink" title="ShowResult()函数"></a>ShowResult()函数</h4><p>输出最小化后的结果，我又偷懒直接输出到控制台了XD</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果输入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MDFA State List:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MDFA_Group.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print( <span class="string">"StateId: "</span> + i + <span class="string">"\tContainedNFAState: "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : MDFA_Group.get(i))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(DFA_StateList.get(x) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出开始状态集合</span></span><br><span class="line">    System.out.println(<span class="string">"\nStart State: "</span> + MDFA_StartState);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出终结状态集合</span></span><br><span class="line">    System.out.print(<span class="string">"End State List: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : MDFA_EndList)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\nAdjacency Relation:"</span>);</span><br><span class="line">    System.out.print(<span class="string">"Id\t"</span>);</span><br><span class="line">    <span class="keyword">for</span>(String x : SignList)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(x + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MDFA_AdjacencyTable.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : MDFA_AdjacencyTable.get(i))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(x + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行说明-1"><a href="#运行说明-1" class="headerlink" title="运行说明"></a>运行说明</h3><p>与NFA转DFA的情况差不多，就不多说了…</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MinimizeDFA mdfa = <span class="keyword">new</span> MinimizeDFA();</span><br><span class="line">    mdfa.ReadData(<span class="string">"TEMP.txt"</span>);</span><br><span class="line">    mdfa.Minimize();</span><br><span class="line">    mdfa.ShowResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h1><h2 id="NFA转DFA测试"><a href="#NFA转DFA测试" class="headerlink" title="NFA转DFA测试"></a>NFA转DFA测试</h2><h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><p><strong>用例</strong></p><p>NFA: </p><center><br><img src="N2D1.jpg" width="100%" alt="NFA2DFA输入用例1"><br></center><p>理论上转换后得到的DFA:</p><center><br><img src="N2D1-RES.jpg" width="100%" alt="NFA输入用例1对应转换结果"><br></center><table><thead><tr><th style="text-align:center">新状态编号</th><th style="text-align:center">对应原状态集合</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0 1 2 4 7</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3 6 7 8</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">5 6 7</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">10</td></tr></tbody></table><p><strong>输入数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">a b</span><br><span class="line">11</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">1,7 -1 -1</span><br><span class="line">2,4 -1 -1</span><br><span class="line">-1 3 -1</span><br><span class="line">6 -1 -1</span><br><span class="line">-1 -1 5</span><br><span class="line">6 -1 -1</span><br><span class="line">7 -1 -1</span><br><span class="line">-1 8 -1</span><br><span class="line">-1 -1 9</span><br><span class="line">-1 -1 10</span><br><span class="line">-1 -1 -1</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><center><br><img src="N2D1-OP.jpg" width="70%" alt="NFA2DFA输入用例1对应输出"><br></center><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><p><strong>用例</strong></p><p>NFA: </p><center><br><img src="N2D2.jpg" width="100%" alt="NFA2DFA输入用例2"><br></center><p>理论上转换后得到的DFA:</p><center><br><img src="N2D2-RES.jpg" width="60%" alt="NFA输入用例2对应转换结果"><br></center><table><thead><tr><th style="text-align:center">新状态编号</th><th style="text-align:center">对应原状态集合</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0 1 2 3 4 6 7 9 10</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1 2 3 4 5 6 7 9 10</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1 2 3 4 6 7 8 9 10</td></tr></tbody></table><p><strong>输入数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">a b</span><br><span class="line">11</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">1,10 -1 -1</span><br><span class="line">2,3 -1 -1</span><br><span class="line">4 -1 -1</span><br><span class="line">-1 5 -1</span><br><span class="line">6 -1 -1</span><br><span class="line">6 -1 -1</span><br><span class="line">7,9 -1 -1</span><br><span class="line">-1 -1 8</span><br><span class="line">7,9 -1 -1</span><br><span class="line">1,10 -1 -1</span><br><span class="line">-1 -1 -1</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><center><br><img src="N2D2-OP.jpg" width="75%" alt="NFA2DFA输入用例2对应输出"><br></center><h3 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h3><p><strong>用例</strong></p><p>NFA: </p><center><br><img src="N2D3.jpg" width="90%" alt="NFA2DFA输入用例3"><br></center><p>理论上转换后得到的DFA:</p><center><br><img src="N2D3-RES.jpg" width="50%" alt="NFA输入用例3对应转换结果"><br></center><table><thead><tr><th style="text-align:center">新状态编号</th><th style="text-align:center">对应原状态集合</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0 1 2 3</td></tr></tbody></table><p><strong>输入数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">a b</span><br><span class="line">4</span><br><span class="line">0 1 2 3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">3 1 -1</span><br><span class="line">0 -1 2</span><br><span class="line">1 -1 3</span><br><span class="line">2 0 -1</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><center><br><img src="N2D3-OP.jpg" width="75%" alt="NFA2DFA输入用例2对应输出"><br></center><h2 id="DFA最小化测试"><a href="#DFA最小化测试" class="headerlink" title="DFA最小化测试"></a>DFA最小化测试</h2><h3 id="测试一-1"><a href="#测试一-1" class="headerlink" title="测试一"></a>测试一</h3><p><strong>用例</strong></p><p>DFA:</p><center><br><img src="MDFA1.jpg" width="85%" alt="DFA输入用例1"><br></center><p>理论上最小化后的DFA:</p><center><br><img src="MDFA1-RES.jpg" width="85%" alt="DFA输入用例1对应最小化结果"><br></center><table><thead><tr><th style="text-align:center">新状态编号</th><th style="text-align:center">对应原状态集合</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">A C</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">D</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">E</td></tr></tbody></table><p><strong>输入数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">a b</span><br><span class="line">5</span><br><span class="line">A B C D E</span><br><span class="line">A</span><br><span class="line">1</span><br><span class="line">E</span><br><span class="line">B C</span><br><span class="line">B D</span><br><span class="line">B C</span><br><span class="line">B E</span><br><span class="line">B C</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><center><br><img src="MDFA1-OP.jpg" width="70%" alt="DFA输入用例2对应输出"><br></center><h3 id="测试二-1"><a href="#测试二-1" class="headerlink" title="测试二"></a>测试二</h3><p><strong>用例</strong></p><p>DFA:</p><center><br><img src="MDFA2.jpg" width="85%" alt="DFA输入用例2"><br></center><p>理论上最小化后的DFA:</p><center><br><img src="MDFA2-RES.jpg" width="85%" alt="DFA输入用例2对应转换结果"><br></center><table><thead><tr><th style="text-align:center">新状态编号</th><th style="text-align:center">对应原状态集合</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">C</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">D E F</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">B</td></tr></tbody></table><p><strong>输入数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">a b</span><br><span class="line">6</span><br><span class="line">A B C D E F</span><br><span class="line">A</span><br><span class="line">4</span><br><span class="line">C D E F</span><br><span class="line">C F</span><br><span class="line">B F</span><br><span class="line">B D</span><br><span class="line">-1 E</span><br><span class="line">-1 F</span><br><span class="line">-1 F</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><center><br><img src="MDFA2-OP.jpg" width="70%" alt="DFA输入用例2对应输出"><br></center><h3 id="测试三-1"><a href="#测试三-1" class="headerlink" title="测试三"></a>测试三</h3><p><strong>用例</strong></p><p>DFA:</p><center><br><img src="MDFA3.jpg" width="100%" alt="DFA输入用例2"><br></center><p>理论上最小化后的DFA:</p><center><br><img src="MDFA3-RES.jpg" width="85%" alt="DFA输入用例2对应转换结果"><br></center><table><thead><tr><th style="text-align:center">新状态编号</th><th style="text-align:center">对应原状态集合</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">A C</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">D</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">E F G H I</td></tr></tbody></table><p><strong>输入数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">a b</span><br><span class="line">9</span><br><span class="line">A B C D E F G H I</span><br><span class="line">A</span><br><span class="line">5</span><br><span class="line">E F G H I</span><br><span class="line">B C</span><br><span class="line">B D</span><br><span class="line">B C</span><br><span class="line">B E</span><br><span class="line">F G</span><br><span class="line">F H</span><br><span class="line">F G</span><br><span class="line">F I</span><br><span class="line">F G</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><center><br><img src="MDFA3-OP.jpg" width="70%" alt="DFA输入用例2对应输出"><br></center>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS概述</title>
      <link href="/2019/03/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-DNS%E6%A6%82%E8%BF%B0/"/>
      <url>/2019/03/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-DNS%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>人类能以很多方式来标识，例如我们能够通过出生证明上的名字来标识，能够通过社保卡号码来标识，也能够通过驾驶执照上的号码来标识。<br>因特网上的主机和人类一样，可以使用多种方式进行标识。主机的一种标识方法是用它的主机名(hostnamae)，如 cnn.com、<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 等，这些名字便于记忆也乐于被人们接受。然而主机名并没有提供关于主机在因特网中位置的信息，且路由器很难处理这种由不定长字母数字组成的标识，因此主机通常使用具有层次结构的、更易于处理的IP地址进行标识。<br>IP地址有着严格的层次结构，它由4个字节组成，其中的每个字节都被句点分隔开来，表示了0~255的十进制数字，如 121.7.106.83 就是一个IP地址。我们说它具有层次结构是因为当我们从左至右扫描它时，我们会得到越来越具体的关于主机位于因特网何处的信息。<br>人们喜欢便于记忆的主机名标识，而路由器喜欢定长的、有着层次结构的IP地址，为了折衷这些不同的偏好，我们需要一种能进行主机名到IP地址转换的目录服务，这就是<strong>域名系统(Domain Name System, DNS)</strong>。</p><a id="more"></a><p><br></p><h1 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a>DNS提供的服务</h1><p>DNS是:</p><ol><li>一个由分层的DNS服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据库的应用层协议</li></ol><p><em>注:</em></p><ol><li><em>DNS服务器通常是运行BIND(Berkeley Internet Name Domain)软件的UNIX机器</em></li><li><em>与HTTP、FTP和SMTP一样，DNS协议是应用层协议，该协议运行在UDP之上，使用53号端口</em></li></ol><p>DNS不是一个直接和用户打交道的应用，相反，DNS是为因特网上的用户应用程序以及其他软件提供一种核心功能，即将主机名转换为其背后的IP地址。DNS通过采用了位于网络边缘的客户和服务器实现了关键的名字到地址的转换功能。</p><p>除了进行主机名到IP地址的转换外，DNS还提供了一些重要的服务:</p><ul><li><strong>主机别名</strong>: 有着复杂主机规范的主机能拥有一个或者多个别名。应用程序可以调用DNS来获得主机别名对应的规范主机名以及主机的IP地址。</li><li><strong>邮件服务器别名</strong>: 有着复杂主机规范名的邮件服务器也可拥有多个别名，电子邮件应用程序可以调用DNS对提供的邮件服务器别名进行解析，以获得该主机的规范主机名及其IP地址。</li><li><strong>负载分配</strong>: 繁忙的站点通常被冗余分布在多台服务器上，每台服务器均运行在不同的端系统上，每个都有着不同的IP地址，这些IP地址构成了一个IP地址集合被与同一个规范主机名相联系。当客户对映射到某个地址集合的名字发出一个DNS请求时，DNS服务器用IP地址的整个集合进行响应，但在每次响应中，会循环改变集合中各地址的顺序，由于客户机通常总是向IP地址排在最前面的服务器发送HTTP请求报文，因此DNS就在所有这些冗余的Web服务器之间循环分配了负载。</li></ul><p><br></p><h1 id="DNS工作机理概述"><a href="#DNS工作机理概述" class="headerlink" title="DNS工作机理概述"></a>DNS工作机理概述</h1><h2 id="工作过程概述"><a href="#工作过程概述" class="headerlink" title="工作过程概述"></a>工作过程概述</h2><p>从用户主机上调用应用程序的角度来看，DNS是一个提供简单、直接的转换服务的黑盒子: 当用户主机上的某些应用程序需要将主机名转换为IP地址时，这些应用程序将调用位于用户主机上的DNS客户端，并指明需要被转换的主机名，DNS客户端会向网络中发送一个DNS查询报文，经过若干毫秒到若干秒的时延后，用户主机上的DNS会接收到一个提供所希望映射的DNS回答报文，这个映射结果会被传递到调用DNS的应用程序。</p><h2 id="分布式、层次数据库"><a href="#分布式、层次数据库" class="headerlink" title="分布式、层次数据库"></a>分布式、层次数据库</h2><p>显而易见，对于遍布全球的互联网来说，只使用一个DNS服务器来说是不合理也是不现实的，因为这种集中式设计存在单点故障会导致整个互联网的DNS服务中断、通信容量限制、远距离带来的低速与拥塞、维护困难、不可扩展等诸多问题。因此，DNS采用了分布式的设计方案，事实上DNS是一个在因特网上实现分布式数据库的精彩范例。</p><p>为了处理扩展性问题，DNS使用了大量的DNS服务器，它们以层次方式组织，并且分布在全世界范围内。没有一台DNS服务器拥有因特网上所有主机的映射。相反，该映射分布在所有的DNS服务器上。</p><center><br><img src="DNS服务器的部分层次结构.jpg" width="80%" height="80%" alt="DNS服务器的部分层次结构"><br>DNS服务器的部分层次结构<br></center><p>大致来说，有3种类型的DNS服务器:</p><ul><li><strong>根DNS服务器</strong>: 根DNS服务器负责管理互联网的主目录，它维护所有顶级域(DNS)服务器的IP地址。(全世界共有13台根DNS服务器，分为1台主根服务器(美国)和12台辅根服务器(美国9台、英国1台、瑞典1台、日本1台)。</li><li><strong>顶级域(Top-Level Domain, TLD)DNS服务器</strong>: 顶级域(DNS)服务器维护顶级域名(如com、org、edu等)以及所有国家的顶级域名(如cn、uk、jp等)下的权威DNS服务器的IP地址。(注意一台服务器仅负责解析一个顶级域名下的全权威DNS服务器IP地址)</li><li><strong>权威DNS服务器</strong>: 权威DNS服务器负责某顶级域名下的子域的解析工作。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机的名字映射为IP地址，一个组织机构的权威DNS服务器收藏了这些DNS记录组织机构可以选择实现自己的权威DNS服务器或者支付费用将这些记录存储在某个服务提供商的权威DNS服务器中。(权威服务器实际上也可以具有一定的层次结构，如某顶级域名的二级域名的权威DNS服务器下可能存在多个三级域名的权威DNS服务器)</li></ul><p>(注:每台服务器实际上是一个冗余服务器的网络，以提供安全性和可靠性。)</p><p>假定一个DNS客户要决定主机名为 <a href="http://www.amazon.com" target="_blank" rel="noopener">www.amazon.com</a> 的主机的IP地址，粗略来说，将发生下列事件: 客户首先与根服务器之一联系，它将返回顶级域名com的TLD服务器的IP地址，接着该客户与这些TLD服务器之一联系，它将为 amazon.com 返回权威服务器的IP地址，最后客户与 amazon.com 的权威服务器之一联系，它为主机名 <a href="http://www.amazon.com" target="_blank" rel="noopener">www.amazon.com</a> 返回其IP地址。</p><p>除了这3类DNS服务器外，还有另一类重要的DNS服务器，称为<strong>本地DNS服务器(local DNS server)</strong>。一个本地DNS服务器严格来说并不属于DNS服务器的层次结构，但它对DNS服务器的层次结构来说是重要的。每个ISP(网络提供者)都有一台本地DNS服务器，当主机与某个ISP连接时，该ISP提供一台主机的IP地址，该主机具有一台或多台其本地DNS服务器的IP地址。当主机发送DNS请求时，该请求被发往本地DNS服务器，本地DNS服务器起着代理的作用，由它负责与各层DNS服务器进行交互并最终将查询结果返回客户主机。</p><p>对DNS查询请求的处理方式一般有<strong>递归查询(recursive query)</strong>和<strong>迭代查询(iterative query)</strong>两种。<br>递归查询是指一台主机发起一个DNS查询请求，每台受到该请求的服务器在查询到下一级服务器的IP地址后不返回而是递归性地将该查询转发到检索到的服务器上，逐一”深入”，最后逐层返回。<br>迭代查询是指一台主机向一台服务器发起一个DNS查询，服务器在收到查询请求后直接返回检索到的下一级服务器的IP地址而不递归发送查询请求，在主机受到下一级服务器的IP地址后，由主机自行向返回的下一级服务器发送查询请求，不断迭代，直到主机最终受到某权威服务器的IP地址并在发送请求后受到了最终的IP地址。<br>从理论上讲，任何DNS查询既可以是迭代的也可以是递归的。实践中，查询通常遵循以下模式:从请求主机到本地DNS服务器的查询是递归的，其余的查询是迭代的。</p><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><p>通过上述的介绍，我们可以看出，当一台主机发送一个DNS查询请求时，该请求将会涉及到至少4个服务器(本地DNS服务器、根DNS服务器、顶级域DNS服务器以及权威DNS服务器)、包含至少8次的DNS报文的发送(与每台服务器的请求交互至少涉及到一次发送和一次返回两个DNS报文)，可以预测出该查询带来的延迟将是相当可观的。实际上，为了改善时延性能并减少因特网上到处传输的DNS报文数量，DNS广泛使用了缓存的技术。</p><p>DNS缓存的原理非常简单，在一个请求链中，当某DNS服务器接收到了一个DNS回答时，它能将该回答中的信息缓存在本地服务器中，如果在DNS服务器中缓存了一台主机名/IP地址对，而另一个对相同主机名的查询到达该DNS服务器时，该DNS服务器就能够提供相应的所要求的IP地址，即使它不是该所要求的主机名的权威服务器。</p><p>由于主机和主机名与IP地址间的映射并不是永久的，对于每条被缓存的主机名/IP地址对均有一个<strong>TTL(Time-To-Live)</strong>字段，该字段随时间减小，当某一条缓存的TTL减小为零时，该缓存信息将被丢弃。TTL时间一般由被查询主机名的权威服务器在返回查询结果时连同发送。</p><p><br></p><h1 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h1><h2 id="资源记录-RR"><a href="#资源记录-RR" class="headerlink" title="资源记录(RR)"></a>资源记录(RR)</h2><p>共同实现DNS分布式数据库的所有DNS服务器存储了<strong>资源记录(Resource Record, RR)</strong>，资源记录提供了主机名到IP地址的映射。每个DNS回答报文包含了一条或多条资源记录。</p><p>资源记录是一个包含了下列字段的4元组:<br><code>(Name, Value, Type, TTL)</code><br>各字段的含义如下:</p><ul><li><strong>Name</strong>: 记录的名称或记录所有者的名称。可以是根域名(@)或子域名(如www)。</li><li><strong>Value</strong>: 记录的数据，具体含义随记录的类型变化，如当记录的类型为A时，该字段存储的是主机的IPv4地址。</li><li><strong>Type</strong>: 记录的类型,如A表示一条IPv4地址记录。</li><li><strong>TTL</strong>: 该条记录的缓存失效时间，注意，该数值并不是恒定的，它会随时间减小，当期减小为零时，该条记录失效。</li></ul><p>Name字段部分取值及含义:</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">@</td><td style="text-align:left">直接解析主域名，如example.com</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">泛解析，匹配所有其他二级域名，*.example.com</td></tr><tr><td style="text-align:left">二级域名</td><td style="text-align:left">解析以字段值为二级域名的域名。如字段值为www，则解析<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></td></tr></tbody></table><p>Type字段部分取值及含义:</p><table><thead><tr><th style="text-align:left">取值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left">表明该记录为一条IPv4地址记录</td></tr><tr><td style="text-align:left">AAAA</td><td style="text-align:left">表明该记录为一条Ipv6地址记录</td></tr><tr><td style="text-align:left">CNAME</td><td style="text-align:left">表明该记录将域名指向另一个域名</td></tr><tr><td style="text-align:left">MX</td><td style="text-align:left">表明该记录为邮件传输代理地址记录</td></tr><tr><td style="text-align:left">SRV</td><td style="text-align:left">表明该记录为服务定位记录</td></tr><tr><td style="text-align:left">NS</td><td style="text-align:left">表明该记录为域名服务器记录</td></tr><tr><td style="text-align:left">TXT</td><td style="text-align:left">指明该记录是文本记录(绝大多数用来做SPF记录，反垃圾邮件)</td></tr></tbody></table><p>关于更多Type类型及各类型下记录的示例可以参考以下连接:<br><a href="https://support.google.com/domains/answer/3251147?hl=en" target="_blank" rel="noopener">Google Domains Help - About resource records</a><br><a href="https://zh.wikipedia.org/wiki/域名伺服器記錄類型列表#記錄類型" target="_blank" rel="noopener">维基百科 - 域名服务器记录类型列表</a></p><h2 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h2><p>DNS报文分为查询报文和回答报文，DNS只有这两种报文，且查询报文和回答报文具有相同的格式。格式如下:</p><center><br><img src="DNS报文格式.jpg" width="80%" alt="DNS报文格式"><br>DNS报文格式<br></center><p>DNS报文中，各区域的说明如下:</p><h2 id="首部区域"><a href="#首部区域" class="headerlink" title="首部区域"></a>首部区域</h2><p>DNS报文中，前12个字节是首部区域，该区域包含如下内容:<br><img src="DNS报文-首部区域.jpg" width="100%" alt="DNS报文格式"><br>各部分的含义为:</p><ul><li><strong>标识符(ID)</strong>: 标识符是一个16比特的数，用于标识该查询，这个标识符会被复制到对查询的回答报文中，以便让客户用它来匹配发送的请求和接受到的回答</li><li><strong>查询/回答标志位(QR)</strong>: 1比特的查询/回答标志位指出该报文是查询报文(0)还是回答报文(1)</li><li><strong>查询种类标志(Opcode)</strong>: 该标志用于表明查询的种类，应答的时候会带有相同的值，其中0代表标准查询、1代表反向查询、2代表服务器状态查询、3-15为保留值暂未使用</li><li><strong>权威标志位(Authoritative Answer, AA)</strong>: 当某DNS服务器是所请求的名字的权威DNS服务器时，该标志位将被置位</li><li><strong>截断标志位(TrunCated, TC)</strong>: 用来表明报文是否被截断，当报文无法被UDP报文容纳下时(报文的大小超过512字节)，该报文会被截断</li><li><strong>希望递归标志位(Recursion Desired, RD)</strong>: 如果客户(主机或DNS服务器)在该DNS服务器没有某条记录时希望它执行递归查询，将设置1比特的希望递归标志位</li><li><strong>递归可用标志位(Recursion Available, RA)</strong>: 如果该DNS服务器支持递归查询，在它的回答报文中会对1比特的递归可用标志位进行置位</li><li><strong>零(Zero)</strong>: 全部被置为0的保留部分，暂未使用</li><li><strong>应答码(ReplyCODE, Rcode)</strong>: 用来表示存在的错误，0表示没有错误、1表示报文格式错误(服务器不能理解请求的报文)、2表示服务器失败、3表示名字错误(解析的域名不存在)、4表示没有实现(服务器不支持该查询类型)、5表示拒绝(服务器拒绝应答)、6-15为保留值暂未使用</li><li><strong>问题记录数(QDCOUNT)</strong>: 表示问题部分的记录数</li><li><strong>回答记录数(ANCOUNT)</strong>: 表示回答部分的记录数</li><li><strong>权威记录数(NSCOUNT)</strong>: 表示权威部分的记录数</li><li><strong>附加记录数(ARCOUNT)</strong>: 表示附加部分的记录数</li></ul><h2 id="查询区域"><a href="#查询区域" class="headerlink" title="查询区域"></a>查询区域</h2><p>查询区域指问题部分，该区域包含着正在进行的查询信息。当一个DNS报文是查询报文时，它就会包含该区域。该区域的记录的格式如下:<br><img src="DNS报文-查询区域.jpg" width="100%" alt="DNS报文格式"><br>各部分的含义为:</p><ul><li><strong>查询名(Name)</strong>: 指要进行查询的名字，通常是域名，当查询方式为反向查询时则为IP地址</li><li><strong>查询类型(Type)</strong>: 指要查询的类型，该类型对应于资源记录类型</li><li><strong>查询类(Class)</strong>: 指明查询的类，对于Internet来说一般为IN</li></ul><h2 id="应答区域"><a href="#应答区域" class="headerlink" title="应答区域"></a>应答区域</h2><p>应答区域指回答部分、权威部分以及附加信息部分。当一个DNS报文是回答报文时，它就会包含该区域。该区域的记录的格式如下:<br><img src="DNS报文-应答区域.jpg" width="100%" alt="DNS报文格式"><br>各部分的含义为:</p><ul><li><strong>名称(Name)</strong>: 同查询名，通常是域名</li><li><strong>类型(Type)</strong>: 同查询类型，对应资源记录的类型</li><li><strong>类(Class)</strong>: 同查询类，对于Internet来说一般为IN</li><li><strong>生存时间(TTL)</strong>: 如前所述，表明该记录的缓存有效期</li><li><strong>数据长度(Data Length)</strong>: 表明数据部分的长度</li><li><strong>数据(Data)</strong>: 存放资源记录的具体数据，比如对于A类型的资源记录，其数据部分存放的就是其IPv4地址</li></ul><p><strong>附</strong></p><p>DNS报文部分我参考了以下文章，推荐阅读:<br><a href="https://blog.csdn.net/liao152/article/details/45252387" target="_blank" rel="noopener">深入理解DNS报文格式-夜苍山-CSDN博客</a><br><a href="http://www.keyboardbanger.com/dns-message-format-name-compression/" target="_blank" rel="noopener">DNS Message Format And Name Compression - Keyboard Banger</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕达哥拉斯平均数</title>
      <link href="/2019/03/05/%E9%9A%8F%E7%AC%94-%E6%AF%95%E8%BE%BE%E5%93%A5%E6%8B%89%E6%96%AF%E5%B9%B3%E5%9D%87%E6%95%B0/"/>
      <url>/2019/03/05/%E9%9A%8F%E7%AC%94-%E6%AF%95%E8%BE%BE%E5%93%A5%E6%8B%89%E6%96%AF%E5%B9%B3%E5%9D%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>本文粗略介绍了算术平均数、几何平均数以及调和平均数。</p><p>参考文章:</p><ul><li><a href="http://www.elecfans.com/d/712572.html" target="_blank" rel="noopener">几何平均数和调和平均数是什么？有什么作用？详细资料讨论</a></li><li><a href="https://wiki.mbalib.com/wiki/%E5%87%A0%E4%BD%95%E5%B9%B3%E5%9D%87%E6%95%B0" target="_blank" rel="noopener">MBA智库百科-几何平均数</a></li><li><a href="https://wiki.mbalib.com/wiki/%E8%B0%83%E5%92%8C%E5%B9%B3%E5%9D%87%E6%95%B0" target="_blank" rel="noopener">MBA智库百科-调和平均数</a></li><li>邓卫平. 几何平均数与调和平均数那点儿事[J]. 调研世界, 2013(8):64-65.</li></ul><a id="more"></a><hr><h2 id="毕达哥拉斯平均数"><a href="#毕达哥拉斯平均数" class="headerlink" title="毕达哥拉斯平均数"></a>毕达哥拉斯平均数</h2><p>平均数是统计学术语，是表示一组数据集中趋势的量数，表明数据集中各数据相对集中较多的中心位置。<br>毕达哥拉斯平均数是算数平均数、几何平均数、调和平均数三类平均数的总称。<br>根据三种平均数各自的计算公式，有调和平均数总是小于几何平均数，几何平均数总是小于算数平均数；特别地，在数据集中所有数据相等时，三种平均数数值相等。</p><h2 id="算术平均数"><a href="#算术平均数" class="headerlink" title="算术平均数"></a>算术平均数</h2><p>在三类平均数中，算术平均数是所有人都接触过的，也是最早接触的。<br>算术平均数又称均值，是统计学中最基本、最常用的一种平均指标。它适用于数据间关系是加的数据集。</p><p>计算公式:<br>$<br>简单算数平均数:<br>\overline{X}<br>= \frac{X_1+X_2+…+X_n}{n}<br>= \frac{\sum_{i=1}^n X_i}{n}<br>\\<br>加权算术平均数:<br>\overline{X}<br>= \frac{ X_1 \times W_1 + X_2 \times W_2 + … + X_n \times W_n }{ W_1+W_2+…+W_n }<br>= \frac{ \sum_{i=1}^n {X_i \times W_i} }{ \sum_{i=1}^n {W_i} }<br>\\<br>以上公式中X_i代表第i项的数值，n为项的总数，W_i为第i项的权重。<br>$</p><p>算术平均数很好理解，将所有的数据相加之后除以数据个数，从而得到了数据的均值。但需要注意，仅当数据集中的数据之间具有加法关系而不存在尺度或比例的变化时，算数平均数才是有意义的；此外，算数平均数易受到极端值的影响，换句话说，极端值会削弱算术平均数对数据集中的数据的集中趋势的代表作用，这也是为什么评分时要“去掉一个最高分和一个最低分”。</p><p><strong>总结</strong></p><ol><li>相较于中位数较少受到随机因素的影响  </li><li>较少受到抽样变化的影响  </li><li>其易反应灵敏，易受到极端数据的影响。</li></ol><hr><font color="gray">之前提到过平均数用来表示一组数据的集中趋势。考虑公比为3、首项为1的等比序列的前7位:1、3、9、27、81、243、729。使用算术平均数时，计算得到该序列额算数平均数近似为156,显然，它并没有反应该序列中7个数据的集中趋势，实际上，该值是这组数据的中位数(27)的5倍多。此时，算术平均数已经不能反应该序列的数据的集中趋势了。下面引入几何平均数:</font><h2 id="几何平均数"><a href="#几何平均数" class="headerlink" title="几何平均数"></a>几何平均数</h2><p>几何平均数适用于对比率数据的平均，并主要用于计算数据平均增长(变化)率。<br>几何平均数是n个变量值连乘的积的n次方根。</p><p>计算公式:<br>$<br>简单几何平均数:<br>G<br>= \sqrt[n]{ X_1 \times X_2 \times X_3 \times … \times X_n }<br>= \sqrt[n]{ \prod_{i=1}^n {X_i} }<br>\\<br>加权几何平均数:<br>G<br>= \sqrt[\sum_{i=1}^{n} {W_i}]{ X_1^{W_1} \times X_2^{W_2} \times X_3^{W_3} \times … \times X_n^{W_n} }<br>= \sqrt[\sum_{i=1}^{n} {W_i}]{ \prod_{i=1}^n X_i^{W_i}}<br>\\<br>以上公式中X_i代表第i项的数值，n为项的总数，W_i为第i项的权重。<br>$</p><p>几何平均数适用于具有等比或近似等比关系的数据(如复利问题，计算平均年利率)。它仅能应用于正数，如果数据集中存在0，则几何平均数将恒为0，如果变量值有负值，则计算出的几何平均数就会成为负数或虚数。几何平均数对离散值是不敏感的，这使得它可能会遮蔽具有较大影响的数值，换句话说，它受极端数值的影响较算术平均数小。</p><p>几何平均数的一个特点是它允许我们在不考虑尺度问题的前提下对数据进行比较。例:<br>考虑有两家咖啡店A和B，同时有两个网站对这两家咖啡店进行了评分，其中，网站一使用五分制，网站二使用百分制。。咖啡店A的两个评分分别为4.5(网站一)和68(网站二)，咖啡店B的两个评分分别为3(网站一)和75(网站二)。若我们根据这些数据来比较两家咖啡店的评分，如果使用算数平均数，我们需要先将两个来源的评分转换为同一标准，即将数据转换到统一尺度，再分别计算算数平均值进行比较:<br>$<br>A: ((4.5 \times 20) + 68) \div 2 = 79<br>\\<br>B: ((3 \times 20) + 75) \div 2 = 67.5<br>$<br>显然咖啡店A的口碑优于咖啡店B。<br>然而，如果我们使用几何平均数:<br>$<br>A: \sqrt{4.5 \times 68} = 17.5<br>\\<br>B: \sqrt{3 \times 75} = 15<br>$<br>我们可以在不考虑尺度的前提下直接计算结果并比较，并且能得到同样的结论。但同时需要注意，此时得到的两个几何平均数已经不再具有可解释的尺度了(尺度已经变为原尺度5和100的几何平均数了)，在这样的情况下，几何平均数其实是无单位的。</p><p><strong>总结</strong></p><ol><li>适用于具有具有等比或近似等比关系的数据</li><li>几何平均数受极端值的影响较算术平均数小</li><li>仅适用于正数</li><li>应用时可能会丢失有意义的尺度和单位</li></ol><hr><h2 id="调和平均数"><a href="#调和平均数" class="headerlink" title="调和平均数"></a>调和平均数</h2><p><blockquote><em>&lt;邓卫平. 几何平均数与调和平均数那点儿事[J]. 调研世界, 2013(8):64-65.&gt;</em><br>调和何意？调和是什么?怎么调和?<br>调和平均数对应的英文是harmonic mean，其实用英文名词也不是说它就是源头，只不过我们呢比较熟悉而已。调和的概念来源于古希腊的毕达哥拉斯学派研究数字时发现的音乐属性，如果取三根琴弦，其长度分别为10、12、15，用同样的力弹拨这三根绷的一样紧的琴弦，他们将会分别发出很协和的乐声(协和是音乐界对harmony的翻译术语，而其在数学中被译为了调和，不同的领域对同一个引入的外国词汇有不同的翻译，这也是后发者的无奈吧)，研究他们的弦长发时发现:$\frac{1}{10}-\frac{1}{12}=\frac{1}{12}-\frac{1}{15}$，这就是被认为是协和乐音的数学机理了，变形可得$\frac{1}{12}=\frac{1}{2}(\frac{1}{10}+\frac{1}{15})$，这是一种新的平均形式，且称12为10和15的调和平均数。更一般的，调和平均数可定义为n个数的倒数的算数平均数的倒数，即$\frac{1}{a}=\frac{1}{n}(\frac{1}{a_1}+\frac{1}{a_2}+…+\frac{1}{a_n})$，a为$a_1,a_2…a_n$的调和平均数。<br></blockquote><br></p><p>算数平均数需要加法，几何平均数则利用乘法，调和平均数使用倒数。<br>调和平均数又称倒数平均数，是所给数据集的倒数的算数平均数的倒数。  </p><p>计算公式:<br>$<br>简单调和平均数:<br>H<br>= \frac{1}{\frac{1}{n} \times (\frac{1}{X_1}+\frac{1}{X_2}+\frac{1}{X_3}+…+\frac{1}{X_n})}<br>= \frac{1}{\frac{1}{n} \times \sum_{i=1}^n \frac{1}{X_i}}<br>= \frac{n}{\sum_{i=1}^{n} \frac{1}{X_i}}<br>\\<br>加权调和平均数:<br>H<br>= \frac{1}{\frac{1}{W_1+W_2+…+W_n} \times (\frac{W_1}{X_1}+\frac{W_2}{X_2}+…+\frac{W_n}{X_n})}<br>= \frac{1}{\frac{1}{\sum_{i=1}^n W_i} \times \sum_{i=1}^n \frac{W_i}{X_i}}<br>= \frac{\sum_{i=1}^n W_i}{\sum_{i=1}^n \frac{W_i}{X_i}}<br>$</p><p>调和平均数常作为算数平均数的变形来使用，与算数平均数相似，调和平均数易受极端值的影响，且受极小值的影响比受极大值的影响更大。由于其包含倒数部分，因此不能对存在0的数据集使用调和平均数。</p><p>调和平均数应用范围较小，在实际中，往往由于缺乏总体单位数的资料(已知分子资料缺分母资料)而不能直接计算算数平均数，这时需要用调和平均数。例:<br>考虑有A、B两地，你从A地前往B地办事，去程速度为30km/h，事情处理完毕后你返回A地，返程的速度为10km/h，求你在A、B两地间往返的平均速度。常规计算方案为设从A地到B地距离为$Lkm$，则从A地到B地用时为$\frac{L}{30}$，从B地到A地用时为$\frac{L}{10}$，平均速度为总路径除以总用时，即$\frac{2L}{\frac{L}{30} + \frac{L}{10}} = 15$。直接使用调和平均数，有$\frac{1}{\frac{1}{2} \times (\frac{1}{30} + \frac{1}{10})} = 15$。  </p><p><strong>总结</strong></p><ol><li>易受极端值的影响，受极小值的影响比受极大值的影响更大</li><li>不能应用于含有0的数据集</li><li>多用于已知分子资料，缺分母资料的情况</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下MySQL问题</title>
      <link href="/2019/01/12/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Linux%E4%B8%8BMySQL%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/12/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Linux%E4%B8%8BMySQL%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这篇文档记录了我在Linux系统下使用MySQL时遇到的问题和解决方案，列表如下：</p><ul><li>启动MySQL时提示No directory, logging in with HOME=/</li><li>无法启动MySQL服务</li><li>无法终止MySQL服务</li></ul><a id="more"></a><hr><h2 id="问题详情与解决方案"><a href="#问题详情与解决方案" class="headerlink" title="问题详情与解决方案"></a>问题详情与解决方案</h2><h3 id="●-启动MySQL时提示No-directory-logging-in-with-HOME"><a href="#●-启动MySQL时提示No-directory-logging-in-with-HOME" class="headerlink" title="● 启动MySQL时提示No directory, logging in with HOME=/"></a>● 启动MySQL时提示No directory, logging in with HOME=/</h3><p><strong>问题示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Starting MySQL database server mysqld  [fail]</span><br><span class="line">No directory, logging in with HOME=/</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong><br>在控制台输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br></pre></td></tr></table></figure><p><br></p><h3 id="●-无法启动MySQL服务"><a href="#●-无法启动MySQL服务" class="headerlink" title="● 无法启动MySQL服务"></a>● 无法启动MySQL服务</h3><p><strong>问题示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting MySQL database server mysqld [fail]</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong><br>在控制台输入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mysql: /var/lib/mysql</span><br></pre></td></tr></table></figure><p><br></p><h3 id="●-无法终止MySQL服务"><a href="#●-无法终止MySQL服务" class="headerlink" title="● 无法终止MySQL服务"></a>● 无法终止MySQL服务</h3><p><strong>问题示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stopping MySQL database server mysqld[fail]</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong><br>先在控制台执行以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p>在输出结果中找到password = xXxXxXxXxXxX字段:<br><img src="debian.jpeg" alt="password字段位置" width="60%" height="60%"><br>在控制台登入MySQL，之后输入如下指令（其中xXxXxXxXxXxX替换为上一步中password字段的值）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'debian-sys-maint'</span>@<span class="string">'localhost'</span> </span><br><span class="line"><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'xXxXxXxXxXxX'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
